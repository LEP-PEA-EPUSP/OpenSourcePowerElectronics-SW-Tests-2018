
DAC_Roger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002438  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080029b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000bc48  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000bc4c  2000bc4c  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000490c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000116e8  00000000  00000000  00024940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000249e  00000000  00000000  00036028  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007a8  00000000  00000000  000384c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a30  00000000  00000000  00038c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000563b  00000000  00000000  000396a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003561  00000000  00000000  0003ecdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004223c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018fc  00000000  00000000  000422b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025a8 	.word	0x080025a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080025a8 	.word	0x080025a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a42:	e003      	b.n	8000a4c <LoopCopyDataInit>

08000a44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a4a:	3104      	adds	r1, #4

08000a4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a54:	d3f6      	bcc.n	8000a44 <CopyDataInit>
  ldr  r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a58:	e002      	b.n	8000a60 <LoopFillZerobss>

08000a5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a5c:	f842 3b04 	str.w	r3, [r2], #4

08000a60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a64:	d3f9      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a66:	f000 f981 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f001 f851 	bl	8001b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f000 f873 	bl	8000b58 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a78:	080029b0 	.word	0x080029b0
  ldr  r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a80:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000a84:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000a88:	2000bc4c 	.word	0x2000bc4c

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000a90:	b510      	push	{r4, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 8000a94:	2400      	movs	r4, #0
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <SystemClock_Config+0x80>)
 8000a98:	9401      	str	r4, [sp, #4]
 8000a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <SystemClock_Config+0x84>)
 8000aae:	9402      	str	r4, [sp, #8]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aba:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000acc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000ad2:	f000 fd0d 	bl	80014f0 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000ad6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000ada:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ade:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	9407      	str	r4, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000ae6:	f000 fe6f 	bl	80017c8 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000aea:	f000 ff49 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af6:	f000 f9eb 	bl	8000ed0 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000afa:	2004      	movs	r0, #4
 8000afc:	f000 f9fe 	bl	8000efc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b00:	4622      	mov	r2, r4
 8000b02:	4621      	mov	r1, r4
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 f9a2 	bl	8000e50 <HAL_NVIC_SetPriority>
}
 8000b0c:	b014      	add	sp, #80	; 0x50
 8000b0e:	bd10      	pop	{r4, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <TIM6_Config>:

}


void TIM6_Config(void)
{
 8000b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  static TIM_HandleTypeDef  htim;
  TIM_MasterConfigTypeDef sMasterConfig;

  /*##-1- Configure the TIM peripheral #######################################*/
  /* Time base configuration */
  htim.Instance = TIM6;
 8000b1a:	4c0c      	ldr	r4, [pc, #48]	; (8000b4c <TIM6_Config+0x34>)
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <TIM6_Config+0x38>)
 8000b1e:	6023      	str	r3, [r4, #0]

  htim.Init.Period = 0x7FF;
  htim.Init.Prescaler = 0;
 8000b20:	2500      	movs	r5, #0
  htim.Init.Period = 0x7FF;
 8000b22:	f240 73ff 	movw	r3, #2047	; 0x7ff
  htim.Init.ClockDivision = 0;
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
  HAL_TIM_Base_Init(&htim);
 8000b26:	4620      	mov	r0, r4
  htim.Init.Period = 0x7FF;
 8000b28:	60e3      	str	r3, [r4, #12]
  htim.Init.Prescaler = 0;
 8000b2a:	6065      	str	r5, [r4, #4]
  htim.Init.ClockDivision = 0;
 8000b2c:	6125      	str	r5, [r4, #16]
  htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim);
 8000b30:	f000 ffb2 	bl	8001a98 <HAL_TIM_Base_Init>

  /* TIM6 TRGO selection */
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b34:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

  HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000b36:	4669      	mov	r1, sp
 8000b38:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	e88d 0028 	stmia.w	sp, {r3, r5}
  HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000b3e:	f000 ffc5 	bl	8001acc <HAL_TIMEx_MasterConfigSynchronization>

  /*##-2- Enable TIM peripheral counter ######################################*/
  HAL_TIM_Base_Start(&htim);
 8000b42:	4620      	mov	r0, r4
 8000b44:	f000 ff36 	bl	80019b4 <HAL_TIM_Base_Start>
}
 8000b48:	b003      	add	sp, #12
 8000b4a:	bd30      	pop	{r4, r5, pc}
 8000b4c:	20000020 	.word	0x20000020
 8000b50:	40001000 	.word	0x40001000
 8000b54:	00000000 	.word	0x00000000

08000b58 <main>:
{
 8000b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b5c:	ed2d 8b02 	vpush	{d8}
 8000b60:	b087      	sub	sp, #28
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8000b62:	4d43      	ldr	r5, [pc, #268]	; (8000c70 <main+0x118>)
	  senoide[i] = (uint8_t) (256*(0.5+0.5*sinf(((float)i)/48000*2*3.1416*6.35*f)));
 8000b64:	ed9f 8a43 	vldr	s16, [pc, #268]	; 8000c74 <main+0x11c>
 8000b68:	4f43      	ldr	r7, [pc, #268]	; (8000c78 <main+0x120>)
 8000b6a:	f8df b120 	ldr.w	fp, [pc, #288]	; 8000c8c <main+0x134>
  __GPIOA_CLK_ENABLE();
 8000b6e:	2400      	movs	r4, #0
  HAL_Init();
 8000b70:	f000 f934 	bl	8000ddc <HAL_Init>
  SystemClock_Config();
 8000b74:	f7ff ff8c 	bl	8000a90 <SystemClock_Config>
  __GPIOA_CLK_ENABLE();
 8000b78:	9403      	str	r4, [sp, #12]
 8000b7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	632b      	str	r3, [r5, #48]	; 0x30
 8000b82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	9303      	str	r3, [sp, #12]
 8000b8a:	9b03      	ldr	r3, [sp, #12]
  TIM6_Config();
 8000b8c:	f7ff ffc4 	bl	8000b18 <TIM6_Config>
  __DMA1_CLK_ENABLE();
 8000b90:	9402      	str	r4, [sp, #8]
 8000b92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b98:	632b      	str	r3, [r5, #48]	; 0x30
 8000b9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hdac.Instance = DAC;
 8000b9c:	4d37      	ldr	r5, [pc, #220]	; (8000c7c <main+0x124>)
  __DMA1_CLK_ENABLE();
 8000b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000ba2:	4622      	mov	r2, r4
 8000ba4:	2102      	movs	r1, #2
  __DMA1_CLK_ENABLE();
 8000ba6:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000ba8:	2010      	movs	r0, #16
  __DMA1_CLK_ENABLE();
 8000baa:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000bac:	f000 f950 	bl	8000e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bb0:	2010      	movs	r0, #16
 8000bb2:	f000 f981 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  hdac.Instance = DAC;
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <main+0x128>)
 8000bb8:	602b      	str	r3, [r5, #0]
  HAL_DAC_Init(&hdac);
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f000 f9af 	bl	8000f1e <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000bc0:	2304      	movs	r3, #4
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	4622      	mov	r2, r4
 8000bc6:	a904      	add	r1, sp, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000bc8:	9304      	str	r3, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bca:	9405      	str	r4, [sp, #20]
	  senoide[i] = (uint8_t) (256*(0.5+0.5*sinf(((float)i)/48000*2*3.1416*6.35*f)));
 8000bcc:	f20f 0990 	addw	r9, pc, #144	; 0x90
 8000bd0:	e9d9 8900 	ldrd	r8, r9, [r9]
  HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 8000bd4:	f000 fa36 	bl	8001044 <HAL_DAC_ConfigChannel>
	  senoide[i] = (uint8_t) (256*(0.5+0.5*sinf(((float)i)/48000*2*3.1416*6.35*f)));
 8000bd8:	2600      	movs	r6, #0
 8000bda:	f04f 0a00 	mov.w	sl, #0
  while (i<48000)
 8000bde:	f64b 3580 	movw	r5, #48000	; 0xbb80
	  senoide[i] = (uint8_t) (256*(0.5+0.5*sinf(((float)i)/48000*2*3.1416*6.35*f)));
 8000be2:	ee07 4a90 	vmov	s15, r4
 8000be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bea:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8000bee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bf2:	ee17 0a90 	vmov	r0, s15
 8000bf6:	f7ff fc4b 	bl	8000490 <__aeabi_f2d>
 8000bfa:	4642      	mov	r2, r8
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	f7ff fc9b 	bl	8000538 <__aeabi_dmul>
 8000c02:	a319      	add	r3, pc, #100	; (adr r3, 8000c68 <main+0x110>)
 8000c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c08:	f7ff fc96 	bl	8000538 <__aeabi_dmul>
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <main+0x12c>)
 8000c10:	f7ff fc92 	bl	8000538 <__aeabi_dmul>
 8000c14:	f7ff fec2 	bl	800099c <__aeabi_d2f>
 8000c18:	ee00 0a10 	vmov	s0, r0
 8000c1c:	f000 ff9c 	bl	8001b58 <sinf>
 8000c20:	ee10 0a10 	vmov	r0, s0
 8000c24:	f7ff fc34 	bl	8000490 <__aeabi_f2d>
 8000c28:	4632      	mov	r2, r6
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	f7ff fc84 	bl	8000538 <__aeabi_dmul>
 8000c30:	4632      	mov	r2, r6
 8000c32:	463b      	mov	r3, r7
 8000c34:	f7ff face 	bl	80001d4 <__adddf3>
 8000c38:	465b      	mov	r3, fp
 8000c3a:	4652      	mov	r2, sl
 8000c3c:	f7ff fc7c 	bl	8000538 <__aeabi_dmul>
 8000c40:	f7ff fe8c 	bl	800095c <__aeabi_d2uiz>
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <main+0x130>)
 8000c46:	5518      	strb	r0, [r3, r4]
	  i++;
 8000c48:	3401      	adds	r4, #1
  while (i<48000)
 8000c4a:	42ac      	cmp	r4, r5
 8000c4c:	d1c9      	bne.n	8000be2 <main+0x8a>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)senoide, 48000, DAC_ALIGN_8B_R);
 8000c4e:	2308      	movs	r3, #8
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <main+0x130>)
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <main+0x124>)
 8000c56:	4623      	mov	r3, r4
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f000 f973 	bl	8000f44 <HAL_DAC_Start_DMA>
 8000c5e:	e7fe      	b.n	8000c5e <main+0x106>
 8000c60:	2e48e8a7 	.word	0x2e48e8a7
 8000c64:	400921ff 	.word	0x400921ff
 8000c68:	66666666 	.word	0x66666666
 8000c6c:	40196666 	.word	0x40196666
 8000c70:	40023800 	.word	0x40023800
 8000c74:	473b8000 	.word	0x473b8000
 8000c78:	3fe00000 	.word	0x3fe00000
 8000c7c:	2000bc34 	.word	0x2000bc34
 8000c80:	40007400 	.word	0x40007400
 8000c84:	407b8000 	.word	0x407b8000
 8000c88:	2000005c 	.word	0x2000005c
 8000c8c:	40700000 	.word	0x40700000

08000c90 <HAL_TIM_Base_MspInit>:
{
 8000c90:	b082      	sub	sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_TIM_Base_MspInit+0x20>)
 8000c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9a:	f042 0210 	orr.w	r2, r2, #16
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9b01      	ldr	r3, [sp, #4]
}
 8000caa:	b002      	add	sp, #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f8b8 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000cc8:	f000 b8c2 	b.w	8000e50 <HAL_NVIC_SetPriority>

08000ccc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ccc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 8000cce:	6802      	ldr	r2, [r0, #0]
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_DAC_MspInit+0x74>)
 8000cd2:	429a      	cmp	r2, r3
{
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	4606      	mov	r6, r0
  if(hdac->Instance==DAC)
 8000cd8:	d130      	bne.n	8000d3c <HAL_DAC_MspInit+0x70>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __DAC_CLK_ENABLE();
 8000cda:	2500      	movs	r5, #0
 8000cdc:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8000ce0:	9500      	str	r5, [sp, #0]
 8000ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	4817      	ldr	r0, [pc, #92]	; (8000d44 <HAL_DAC_MspInit+0x78>)

    /* Peripheral DMA init*/
  
    hdma_dac1.Instance = DMA1_Stream5;
 8000ce6:	4c18      	ldr	r4, [pc, #96]	; (8000d48 <HAL_DAC_MspInit+0x7c>)
    __DAC_CLK_ENABLE();
 8000ce8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	9503      	str	r5, [sp, #12]
    __DAC_CLK_ENABLE();
 8000cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f000 fb0e 	bl	8001324 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d08:	4910      	ldr	r1, [pc, #64]	; (8000d4c <HAL_DAC_MspInit+0x80>)
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	60e5      	str	r5, [r4, #12]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d0c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d10:	2340      	movs	r3, #64	; 0x40
 8000d12:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1a:	6123      	str	r3, [r4, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d20:	61e3      	str	r3, [r4, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
    HAL_DMA_Init(&hdma_dac1);
 8000d22:	4620      	mov	r0, r4
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d28:	6165      	str	r5, [r4, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2a:	61a5      	str	r5, [r4, #24]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d2c:	6223      	str	r3, [r4, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d2e:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d30:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d32:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_DMA_Init(&hdma_dac1);
 8000d34:	f000 f9d8 	bl	80010e8 <HAL_DMA_Init>

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000d38:	60b4      	str	r4, [r6, #8]
 8000d3a:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
 8000d40:	40007400 	.word	0x40007400
 8000d44:	40020000 	.word	0x40020000
 8000d48:	2000bbdc 	.word	0x2000bbdc
 8000d4c:	40026088 	.word	0x40026088

08000d50 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f85d 	bl	8000e10 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000d5a:	f000 b8dc 	b.w	8000f16 <HAL_SYSTICK_IRQHandler>
	...

08000d60 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000d60:	4801      	ldr	r0, [pc, #4]	; (8000d68 <DMA1_Stream5_IRQHandler+0x8>)
 8000d62:	f000 ba2d 	b.w	80011c0 <HAL_DMA_IRQHandler>
 8000d66:	bf00      	nop
 8000d68:	2000bbdc 	.word	0x2000bbdc

08000d6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	490f      	ldr	r1, [pc, #60]	; (8000dac <SystemInit+0x40>)
 8000d6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000d72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <SystemInit+0x44>)
 8000d7c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d7e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000d80:	f042 0201 	orr.w	r2, r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000d86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <SystemInit+0x48>)
 8000d96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000da0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da6:	608b      	str	r3, [r1, #8]
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00
 8000db0:	40023800 	.word	0x40023800
 8000db4:	24003010 	.word	0x24003010

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b510      	push	{r4, lr}
 8000dba:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000dbc:	f000 fde0 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dc8:	f000 f882 	bl	8000ed0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4621      	mov	r1, r4
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f83c 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000dd8:	2000      	movs	r0, #0
 8000dda:	bd10      	pop	{r4, pc}

08000ddc <HAL_Init>:
{
 8000ddc:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_Init+0x30>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de6:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000df6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f817 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff ffda 	bl	8000db8 <HAL_InitTick>
  HAL_MspInit();
 8000e04:	f7ff ff56 	bl	8000cb4 <HAL_MspInit>
}
 8000e08:	2000      	movs	r0, #0
 8000e0a:	bd08      	pop	{r3, pc}
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e10:	4a02      	ldr	r2, [pc, #8]	; (8000e1c <HAL_IncTick+0xc>)
 8000e12:	6813      	ldr	r3, [r2, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000bc48 	.word	0x2000bc48

08000e20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e20:	4b01      	ldr	r3, [pc, #4]	; (8000e28 <HAL_GetTick+0x8>)
 8000e22:	6818      	ldr	r0, [r3, #0]
}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000bc48 	.word	0x2000bc48

08000e2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e3c:	0200      	lsls	r0, r0, #8
 8000e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e42:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e46:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e48:	60d3      	str	r3, [r2, #12]
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b530      	push	{r4, r5, lr}
 8000e54:	68dc      	ldr	r4, [r3, #12]
 8000e56:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	bf28      	it	cs
 8000e64:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 0501 	mov.w	r5, #1
 8000e6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000e70:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e74:	bf8c      	ite	hi
 8000e76:	3c03      	subhi	r4, #3
 8000e78:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7e:	fa05 f404 	lsl.w	r4, r5, r4
 8000e82:	3c01      	subs	r4, #1
 8000e84:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e86:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	ea42 0201 	orr.w	r2, r2, r1
 8000e8c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	bfaf      	iteee	ge
 8000e92:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	f000 000f 	andlt.w	r0, r0, #15
 8000e9a:	4b06      	ldrlt	r3, [pc, #24]	; (8000eb4 <HAL_NVIC_SetPriority+0x64>)
 8000e9c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	bfa5      	ittet	ge
 8000ea0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ea4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000eac:	bd30      	pop	{r4, r5, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	e000ed14 	.word	0xe000ed14

08000eb8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000eb8:	0942      	lsrs	r2, r0, #5
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f000 001f 	and.w	r0, r0, #31
 8000ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ec4:	4b01      	ldr	r3, [pc, #4]	; (8000ecc <HAL_NVIC_EnableIRQ+0x14>)
 8000ec6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	3801      	subs	r0, #1
 8000ed2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ed6:	d20a      	bcs.n	8000eee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000edc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	21f0      	movs	r1, #240	; 0xf0
 8000ee0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000efe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f00:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f02:	bf0c      	ite	eq
 8000f04:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f08:	f022 0204 	bicne.w	r2, r2, #4
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	4770      	bx	lr
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f14:	4770      	bx	lr

08000f16 <HAL_SYSTICK_IRQHandler>:
{
 8000f16:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f18:	f7ff fffc 	bl	8000f14 <HAL_SYSTICK_Callback>
 8000f1c:	bd08      	pop	{r3, pc}

08000f1e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000f1e:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000f20:	4604      	mov	r4, r0
 8000f22:	b168      	cbz	r0, 8000f40 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000f24:	7903      	ldrb	r3, [r0, #4]
 8000f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f2a:	b913      	cbnz	r3, 8000f32 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f2c:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f2e:	f7ff fecd 	bl	8000ccc <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f32:	2302      	movs	r3, #2
 8000f34:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f36:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f38:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f3a:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000f3c:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000f3e:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000f40:	2001      	movs	r0, #1
}
 8000f42:	bd10      	pop	{r4, pc}

08000f44 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000f48:	7940      	ldrb	r0, [r0, #5]
 8000f4a:	2801      	cmp	r0, #1
{
 8000f4c:	460e      	mov	r6, r1
 8000f4e:	f04f 0002 	mov.w	r0, #2
 8000f52:	4611      	mov	r1, r2
 8000f54:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 8000f56:	d04c      	beq.n	8000ff2 <HAL_DAC_Start_DMA+0xae>
 8000f58:	2401      	movs	r4, #1
 8000f5a:	716c      	strb	r4, [r5, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f5c:	7128      	strb	r0, [r5, #4]
 8000f5e:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8000f60:	b9e6      	cbnz	r6, 8000f9c <HAL_DAC_Start_DMA+0x58>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f62:	68a8      	ldr	r0, [r5, #8]
 8000f64:	4f23      	ldr	r7, [pc, #140]	; (8000ff4 <HAL_DAC_Start_DMA+0xb0>)
 8000f66:	63c7      	str	r7, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f68:	4f23      	ldr	r7, [pc, #140]	; (8000ff8 <HAL_DAC_Start_DMA+0xb4>)
 8000f6a:	6407      	str	r7, [r0, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f6c:	4f23      	ldr	r7, [pc, #140]	; (8000ffc <HAL_DAC_Start_DMA+0xb8>)
 8000f6e:	6487      	str	r7, [r0, #72]	; 0x48

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8000f70:	6827      	ldr	r7, [r4, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000f72:	2a04      	cmp	r2, #4
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8000f74:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8000f78:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000f7a:	d009      	beq.n	8000f90 <HAL_DAC_Start_DMA+0x4c>
 8000f7c:	2a08      	cmp	r2, #8
 8000f7e:	d00a      	beq.n	8000f96 <HAL_DAC_Start_DMA+0x52>
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	d134      	bne.n	8000fee <HAL_DAC_Start_DMA+0xaa>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000f84:	f104 0208 	add.w	r2, r4, #8
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000f88:	6827      	ldr	r7, [r4, #0]
 8000f8a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8000f8e:	e01a      	b.n	8000fc6 <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000f90:	f104 020c 	add.w	r2, r4, #12
        break;
 8000f94:	e7f8      	b.n	8000f88 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000f96:	f104 0210 	add.w	r2, r4, #16
        break;
 8000f9a:	e7f5      	b.n	8000f88 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000f9c:	68e8      	ldr	r0, [r5, #12]
 8000f9e:	4f18      	ldr	r7, [pc, #96]	; (8001000 <HAL_DAC_Start_DMA+0xbc>)
 8000fa0:	63c7      	str	r7, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000fa2:	4f18      	ldr	r7, [pc, #96]	; (8001004 <HAL_DAC_Start_DMA+0xc0>)
 8000fa4:	6407      	str	r7, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000fa6:	4f18      	ldr	r7, [pc, #96]	; (8001008 <HAL_DAC_Start_DMA+0xc4>)
 8000fa8:	6487      	str	r7, [r0, #72]	; 0x48
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8000faa:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 8000fac:	2a04      	cmp	r2, #4
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8000fae:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8000fb2:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 8000fb4:	d013      	beq.n	8000fde <HAL_DAC_Start_DMA+0x9a>
 8000fb6:	2a08      	cmp	r2, #8
 8000fb8:	d014      	beq.n	8000fe4 <HAL_DAC_Start_DMA+0xa0>
 8000fba:	b9b2      	cbnz	r2, 8000fea <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000fbc:	f104 0214 	add.w	r2, r4, #20
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000fc0:	6827      	ldr	r7, [r4, #0]
 8000fc2:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000fc6:	6027      	str	r7, [r4, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000fc8:	f000 f8cc 	bl	8001164 <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	2101      	movs	r1, #1
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	40b1      	lsls	r1, r6
 8000fd4:	4311      	orrs	r1, r2
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000fd6:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8000fd8:	6019      	str	r1, [r3, #0]
  __HAL_UNLOCK(hdac);
 8000fda:	7168      	strb	r0, [r5, #5]
  
  /* Return function status */
  return HAL_OK;
 8000fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000fde:	f104 0218 	add.w	r2, r4, #24
        break;
 8000fe2:	e7ed      	b.n	8000fc0 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000fe4:	f104 021c 	add.w	r2, r4, #28
        break;
 8000fe8:	e7ea      	b.n	8000fc0 <HAL_DAC_Start_DMA+0x7c>
  uint32_t tmpreg = 0U;
 8000fea:	2200      	movs	r2, #0
 8000fec:	e7e8      	b.n	8000fc0 <HAL_DAC_Start_DMA+0x7c>
 8000fee:	4632      	mov	r2, r6
 8000ff0:	e7ca      	b.n	8000f88 <HAL_DAC_Start_DMA+0x44>
}
 8000ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ff4:	0800100f 	.word	0x0800100f
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	0800102d 	.word	0x0800102d
 8001000:	0800108b 	.word	0x0800108b
 8001004:	0800109b 	.word	0x0800109b
 8001008:	080010a5 	.word	0x080010a5

0800100c <HAL_DAC_ConvCpltCallbackCh1>:
 800100c:	4770      	bx	lr

0800100e <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800100e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001010:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff fffa 	bl	800100c <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 8001018:	2301      	movs	r3, #1
 800101a:	7123      	strb	r3, [r4, #4]
 800101c:	bd10      	pop	{r4, pc}

0800101e <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800101e:	4770      	bx	lr

08001020 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001020:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001022:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001024:	f7ff fffb 	bl	800101e <HAL_DAC_ConvHalfCpltCallbackCh1>
 8001028:	bd08      	pop	{r3, pc}

0800102a <HAL_DAC_ErrorCallbackCh1>:
 800102a:	4770      	bx	lr

0800102c <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800102c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800102e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001030:	6923      	ldr	r3, [r4, #16]
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fff6 	bl	800102a <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 800103e:	2301      	movs	r3, #1
 8001040:	7123      	strb	r3, [r4, #4]
 8001042:	bd10      	pop	{r4, pc}

08001044 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8001044:	7943      	ldrb	r3, [r0, #5]
 8001046:	2b01      	cmp	r3, #1
{
 8001048:	b530      	push	{r4, r5, lr}
 800104a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800104e:	d017      	beq.n	8001080 <HAL_DAC_ConfigChannel+0x3c>
  tmpreg1 = hdac->Instance->CR;
 8001050:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001052:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001054:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001056:	f640 75fe 	movw	r5, #4094	; 0xffe
 800105a:	4095      	lsls	r5, r2
 800105c:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001060:	c90a      	ldmia	r1, {r1, r3}
 8001062:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8001064:	4093      	lsls	r3, r2
 8001066:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8001068:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	21c0      	movs	r1, #192	; 0xc0
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8001076:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001078:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800107a:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 800107c:	2300      	movs	r3, #0
 800107e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001080:	4618      	mov	r0, r3
}
 8001082:	bd30      	pop	{r4, r5, pc}

08001084 <HAL_DACEx_ConvCpltCallbackCh2>:
 8001084:	4770      	bx	lr

08001086 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001086:	4770      	bx	lr

08001088 <HAL_DACEx_ErrorCallbackCh2>:
 8001088:	4770      	bx	lr

0800108a <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800108a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800108c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800108e:	4620      	mov	r0, r4
 8001090:	f7ff fff8 	bl	8001084 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 8001094:	2301      	movs	r3, #1
 8001096:	7123      	strb	r3, [r4, #4]
 8001098:	bd10      	pop	{r4, pc}

0800109a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800109a:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800109c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800109e:	f7ff fff2 	bl	8001086 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 80010a2:	bd08      	pop	{r3, pc}

080010a4 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80010a4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010a6:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010a8:	6923      	ldr	r3, [r4, #16]
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff ffe9 	bl	8001088 <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 80010b6:	2301      	movs	r3, #1
 80010b8:	7123      	strb	r3, [r4, #4]
 80010ba:	bd10      	pop	{r4, pc}

080010bc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80010c4:	f023 0303 	bic.w	r3, r3, #3
 80010c8:	2118      	movs	r1, #24
 80010ca:	3a10      	subs	r2, #16
 80010cc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010d0:	4904      	ldr	r1, [pc, #16]	; (80010e4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80010d2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80010d4:	bf88      	it	hi
 80010d6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010d8:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80010da:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010dc:	6541      	str	r1, [r0, #84]	; 0x54
  }
  
  return hdma->StreamBaseAddress;
}
 80010de:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	080025c0 	.word	0x080025c0

080010e8 <HAL_DMA_Init>:
{
 80010e8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80010ea:	4604      	mov	r4, r0
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d034      	beq.n	800115a <HAL_DMA_Init+0x72>
  tmp = hdma->Instance->CR;
 80010f0:	6821      	ldr	r1, [r4, #0]
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80010f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010f4:	4d1a      	ldr	r5, [pc, #104]	; (8001160 <HAL_DMA_Init+0x78>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f6:	6862      	ldr	r2, [r4, #4]
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  tmp = hdma->Instance->CR;
 80010fe:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001100:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001102:	68a3      	ldr	r3, [r4, #8]
 8001104:	4313      	orrs	r3, r2
 8001106:	68e2      	ldr	r2, [r4, #12]
 8001108:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	6922      	ldr	r2, [r4, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	6962      	ldr	r2, [r4, #20]
 8001110:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	69a2      	ldr	r2, [r4, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	69e2      	ldr	r2, [r4, #28]
 8001118:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800111a:	6a22      	ldr	r2, [r4, #32]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800111c:	2804      	cmp	r0, #4
          hdma->Init.Mode                | hdma->Init.Priority;
 800111e:	ea43 0302 	orr.w	r3, r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001122:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001126:	bf01      	itttt	eq
 8001128:	6ae2      	ldreq	r2, [r4, #44]	; 0x2c
 800112a:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 800112c:	432a      	orreq	r2, r5
 800112e:	4313      	orreq	r3, r2
  hdma->Instance->CR = tmp;  
 8001130:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001132:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001134:	2804      	cmp	r0, #4
    tmp |= hdma->Init.FIFOThreshold;
 8001136:	bf08      	it	eq
 8001138:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800113a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800113e:	ea43 0300 	orr.w	r3, r3, r0
    tmp |= hdma->Init.FIFOThreshold;
 8001142:	bf08      	it	eq
 8001144:	4313      	orreq	r3, r2
  hdma->Instance->FCR = tmp;
 8001146:	614b      	str	r3, [r1, #20]
  DMA_CalcBaseAndBitshift(hdma);
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff ffb7 	bl	80010bc <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800114e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001150:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001152:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdma->State = HAL_DMA_STATE_READY;
 8001154:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001158:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800115a:	2001      	movs	r0, #1
}
 800115c:	bd38      	pop	{r3, r4, r5, pc}
 800115e:	bf00      	nop
 8001160:	f010803f 	.word	0xf010803f

08001164 <HAL_DMA_Start_IT>:
{
 8001164:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8001166:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800116a:	2c01      	cmp	r4, #1
 800116c:	f04f 0402 	mov.w	r4, #2
 8001170:	d023      	beq.n	80011ba <HAL_DMA_Start_IT+0x56>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001172:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001176:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma);
 8001178:	2501      	movs	r5, #1
 800117a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800117e:	6825      	ldr	r5, [r4, #0]
 8001180:	f025 0501 	bic.w	r5, r5, #1
 8001184:	6025      	str	r5, [r4, #0]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001186:	6825      	ldr	r5, [r4, #0]
 8001188:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800118c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800118e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001190:	6883      	ldr	r3, [r0, #8]
 8001192:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001194:	bf0b      	itete	eq
 8001196:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001198:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800119a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->M0AR = DstAddress;
 800119c:	60e2      	strne	r2, [r4, #12]
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	f043 031e 	orr.w	r3, r3, #30
 80011a4:	6023      	str	r3, [r4, #0]
  hdma->Instance->FCR |= DMA_IT_FE;
 80011a6:	6963      	ldr	r3, [r4, #20]
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6163      	str	r3, [r4, #20]
  __HAL_DMA_ENABLE(hdma);
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 80011b6:	2000      	movs	r0, #0
 80011b8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdma);
 80011ba:	4620      	mov	r0, r4
} 
 80011bc:	bd30      	pop	{r4, r5, pc}
	...

080011c0 <HAL_DMA_IRQHandler>:
{
 80011c0:	b570      	push	{r4, r5, r6, lr}
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011c2:	6d05      	ldr	r5, [r0, #80]	; 0x50
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c4:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80011c6:	682a      	ldr	r2, [r5, #0]
 80011c8:	2308      	movs	r3, #8
 80011ca:	408b      	lsls	r3, r1
 80011cc:	421a      	tst	r2, r3
{
 80011ce:	4604      	mov	r4, r0
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d0:	d015      	beq.n	80011fe <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011d2:	6802      	ldr	r2, [r0, #0]
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	074e      	lsls	r6, r1, #29
 80011d8:	d511      	bpl.n	80011fe <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80011da:	6811      	ldr	r1, [r2, #0]
 80011dc:	f021 0104 	bic.w	r1, r1, #4
 80011e0:	6011      	str	r1, [r2, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011e2:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	64c3      	str	r3, [r0, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 80011ec:	2304      	movs	r3, #4
 80011ee:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80011f2:	2300      	movs	r3, #0
 80011f4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80011f8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80011fa:	b103      	cbz	r3, 80011fe <HAL_DMA_IRQHandler+0x3e>
        hdma->XferErrorCallback(hdma);
 80011fc:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001200:	4b46      	ldr	r3, [pc, #280]	; (800131c <HAL_DMA_IRQHandler+0x15c>)
 8001202:	682a      	ldr	r2, [r5, #0]
 8001204:	408b      	lsls	r3, r1
 8001206:	421a      	tst	r2, r3
 8001208:	d016      	beq.n	8001238 <HAL_DMA_IRQHandler+0x78>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	6951      	ldr	r1, [r2, #20]
 800120e:	0609      	lsls	r1, r1, #24
 8001210:	d512      	bpl.n	8001238 <HAL_DMA_IRQHandler+0x78>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 8001212:	6951      	ldr	r1, [r2, #20]
 8001214:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001218:	6151      	str	r1, [r2, #20]
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800121a:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800121c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8001224:	2304      	movs	r3, #4
 8001226:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800122a:	2300      	movs	r3, #0
 800122c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8001230:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001232:	b10b      	cbz	r3, 8001238 <HAL_DMA_IRQHandler+0x78>
        hdma->XferErrorCallback(hdma);
 8001234:	4620      	mov	r0, r4
 8001236:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001238:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <HAL_DMA_IRQHandler+0x160>)
 800123c:	682a      	ldr	r2, [r5, #0]
 800123e:	408b      	lsls	r3, r1
 8001240:	421a      	tst	r2, r3
 8001242:	d016      	beq.n	8001272 <HAL_DMA_IRQHandler+0xb2>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001244:	6822      	ldr	r2, [r4, #0]
 8001246:	6811      	ldr	r1, [r2, #0]
 8001248:	078e      	lsls	r6, r1, #30
 800124a:	d512      	bpl.n	8001272 <HAL_DMA_IRQHandler+0xb2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 800124c:	6811      	ldr	r1, [r2, #0]
 800124e:	f021 0102 	bic.w	r1, r1, #2
 8001252:	6011      	str	r1, [r2, #0]
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001254:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001256:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 800125e:	2304      	movs	r3, #4
 8001260:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001264:	2300      	movs	r3, #0
 8001266:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800126a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800126c:	b10b      	cbz	r3, 8001272 <HAL_DMA_IRQHandler+0xb2>
        hdma->XferErrorCallback(hdma);
 800126e:	4620      	mov	r0, r4
 8001270:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001272:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	2210      	movs	r2, #16
 8001278:	408a      	lsls	r2, r1
 800127a:	4213      	tst	r3, r2
 800127c:	d016      	beq.n	80012ac <HAL_DMA_IRQHandler+0xec>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	6819      	ldr	r1, [r3, #0]
 8001282:	0708      	lsls	r0, r1, #28
 8001284:	d512      	bpl.n	80012ac <HAL_DMA_IRQHandler+0xec>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001286:	6819      	ldr	r1, [r3, #0]
 8001288:	0349      	lsls	r1, r1, #13
 800128a:	d526      	bpl.n	80012da <HAL_DMA_IRQHandler+0x11a>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800128c:	60aa      	str	r2, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0U)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	0312      	lsls	r2, r2, #12
 8001292:	d401      	bmi.n	8001298 <HAL_DMA_IRQHandler+0xd8>
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8001294:	2331      	movs	r3, #49	; 0x31
 8001296:	e003      	b.n	80012a0 <HAL_DMA_IRQHandler+0xe0>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0U)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	031e      	lsls	r6, r3, #12
 800129c:	d502      	bpl.n	80012a4 <HAL_DMA_IRQHandler+0xe4>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 800129e:	2341      	movs	r3, #65	; 0x41
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 80012a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferHalfCpltCallback != NULL)
 80012a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012a6:	b10b      	cbz	r3, 80012ac <HAL_DMA_IRQHandler+0xec>
        hdma->XferHalfCpltCallback(hdma);
 80012a8:	4620      	mov	r0, r4
 80012aa:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	2220      	movs	r2, #32
 80012b2:	408a      	lsls	r2, r1
 80012b4:	4213      	tst	r3, r2
 80012b6:	d02f      	beq.n	8001318 <HAL_DMA_IRQHandler+0x158>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	06c9      	lsls	r1, r1, #27
 80012be:	d52b      	bpl.n	8001318 <HAL_DMA_IRQHandler+0x158>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	034e      	lsls	r6, r1, #13
 80012c4:	d517      	bpl.n	80012f6 <HAL_DMA_IRQHandler+0x136>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012c6:	60aa      	str	r2, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0U)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	0315      	lsls	r5, r2, #12
 80012cc:	d40e      	bmi.n	80012ec <HAL_DMA_IRQHandler+0x12c>
          if(hdma->XferM1CpltCallback != NULL)
 80012ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80012d0:	b313      	cbz	r3, 8001318 <HAL_DMA_IRQHandler+0x158>
          hdma->XferCpltCallback(hdma);
 80012d2:	4620      	mov	r0, r4
}
 80012d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          hdma->XferCpltCallback(hdma);
 80012d8:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80012da:	6819      	ldr	r1, [r3, #0]
 80012dc:	05c8      	lsls	r0, r1, #23
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012de:	bf5e      	ittt	pl
 80012e0:	6819      	ldrpl	r1, [r3, #0]
 80012e2:	f021 0108 	bicpl.w	r1, r1, #8
 80012e6:	6019      	strpl	r1, [r3, #0]
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012e8:	60aa      	str	r2, [r5, #8]
 80012ea:	e7d3      	b.n	8001294 <HAL_DMA_IRQHandler+0xd4>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0U)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0318      	lsls	r0, r3, #12
 80012f0:	d512      	bpl.n	8001318 <HAL_DMA_IRQHandler+0x158>
        if(hdma->XferCpltCallback != NULL)
 80012f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012f4:	e7ec      	b.n	80012d0 <HAL_DMA_IRQHandler+0x110>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	05c9      	lsls	r1, r1, #23
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80012fa:	bf5e      	ittt	pl
 80012fc:	6819      	ldrpl	r1, [r3, #0]
 80012fe:	f021 0110 	bicpl.w	r1, r1, #16
 8001302:	6019      	strpl	r1, [r3, #0]
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001304:	60aa      	str	r2, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8001306:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001308:	64e3      	str	r3, [r4, #76]	; 0x4c
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 800130a:	2311      	movs	r3, #17
 800130c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001310:	2300      	movs	r3, #0
 8001312:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8001316:	e7ec      	b.n	80012f2 <HAL_DMA_IRQHandler+0x132>
 8001318:	bd70      	pop	{r4, r5, r6, pc}
 800131a:	bf00      	nop
 800131c:	00800001 	.word	0x00800001
 8001320:	00800004 	.word	0x00800004

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001328:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80014e8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4a6b      	ldr	r2, [pc, #428]	; (80014e0 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80014ec <HAL_GPIO_Init+0x1c8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001338:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01U) << position;
 800133a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01U) << position;
 8001340:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001344:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001348:	45b6      	cmp	lr, r6
 800134a:	f040 80b2 	bne.w	80014b2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134e:	684c      	ldr	r4, [r1, #4]
 8001350:	f024 0710 	bic.w	r7, r4, #16
 8001354:	2f02      	cmp	r7, #2
 8001356:	d116      	bne.n	8001386 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001358:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800135c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001360:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001364:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001368:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800136c:	f04f 0c0f 	mov.w	ip, #15
 8001370:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001374:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001378:	690d      	ldr	r5, [r1, #16]
 800137a:	fa05 f50b 	lsl.w	r5, r5, fp
 800137e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	f8ca 5020 	str.w	r5, [sl, #32]
 8001386:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800138c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001390:	fa05 f50a 	lsl.w	r5, r5, sl
 8001394:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001396:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80013aa:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ae:	d811      	bhi.n	80013d4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80013b0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b6:	68cf      	ldr	r7, [r1, #12]
 80013b8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80013bc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80013c0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80013c2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013c8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80013cc:	409f      	lsls	r7, r3
 80013ce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80013d2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013d4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d8:	688f      	ldr	r7, [r1, #8]
 80013da:	fa07 f70a 	lsl.w	r7, r7, sl
 80013de:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013e0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e2:	00e5      	lsls	r5, r4, #3
 80013e4:	d565      	bpl.n	80014b2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	f04f 0b00 	mov.w	fp, #0
 80013ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80013ee:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f2:	4d3c      	ldr	r5, [pc, #240]	; (80014e4 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80013f8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80013fc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001400:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001404:	9703      	str	r7, [sp, #12]
 8001406:	9f03      	ldr	r7, [sp, #12]
 8001408:	f023 0703 	bic.w	r7, r3, #3
 800140c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001410:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001414:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001418:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800141c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001420:	f04f 0e0f 	mov.w	lr, #15
 8001424:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001428:	42a8      	cmp	r0, r5
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800142a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142e:	d047      	beq.n	80014c0 <HAL_GPIO_Init+0x19c>
 8001430:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001434:	42a8      	cmp	r0, r5
 8001436:	d045      	beq.n	80014c4 <HAL_GPIO_Init+0x1a0>
 8001438:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800143c:	42a8      	cmp	r0, r5
 800143e:	d043      	beq.n	80014c8 <HAL_GPIO_Init+0x1a4>
 8001440:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001444:	42a8      	cmp	r0, r5
 8001446:	d041      	beq.n	80014cc <HAL_GPIO_Init+0x1a8>
 8001448:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800144c:	42a8      	cmp	r0, r5
 800144e:	d03f      	beq.n	80014d0 <HAL_GPIO_Init+0x1ac>
 8001450:	4548      	cmp	r0, r9
 8001452:	d03f      	beq.n	80014d4 <HAL_GPIO_Init+0x1b0>
 8001454:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001458:	42a8      	cmp	r0, r5
 800145a:	d03d      	beq.n	80014d8 <HAL_GPIO_Init+0x1b4>
 800145c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001460:	42a8      	cmp	r0, r5
 8001462:	d03b      	beq.n	80014dc <HAL_GPIO_Init+0x1b8>
 8001464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001468:	42a8      	cmp	r0, r5
 800146a:	bf14      	ite	ne
 800146c:	2509      	movne	r5, #9
 800146e:	2508      	moveq	r5, #8
 8001470:	fa05 f50c 	lsl.w	r5, r5, ip
 8001474:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001478:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800147a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800147c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001482:	bf0c      	ite	eq
 8001484:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001486:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001488:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800148a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001490:	bf0c      	ite	eq
 8001492:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001494:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001496:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001498:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800149e:	bf0c      	ite	eq
 80014a0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014a2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80014a4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80014a6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80014aa:	bf54      	ite	pl
 80014ac:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80014ae:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80014b0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	3301      	adds	r3, #1
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	f47f af40 	bne.w	800133a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80014ba:	b005      	add	sp, #20
 80014bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c0:	465d      	mov	r5, fp
 80014c2:	e7d5      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014c4:	2501      	movs	r5, #1
 80014c6:	e7d3      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014c8:	2502      	movs	r5, #2
 80014ca:	e7d1      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014cc:	2503      	movs	r5, #3
 80014ce:	e7cf      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014d0:	2504      	movs	r5, #4
 80014d2:	e7cd      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014d4:	2505      	movs	r5, #5
 80014d6:	e7cb      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014d8:	2506      	movs	r5, #6
 80014da:	e7c9      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014dc:	2507      	movs	r5, #7
 80014de:	e7c7      	b.n	8001470 <HAL_GPIO_Init+0x14c>
 80014e0:	40013c00 	.word	0x40013c00
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40021400 	.word	0x40021400

080014f0 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f0:	6803      	ldr	r3, [r0, #0]
{
 80014f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014f4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	07d8      	lsls	r0, r3, #31
 80014f8:	d438      	bmi.n	800156c <HAL_RCC_OscConfig+0x7c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	0799      	lsls	r1, r3, #30
 80014fe:	d46d      	bmi.n	80015dc <HAL_RCC_OscConfig+0xec>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	071e      	lsls	r6, r3, #28
 8001504:	f100 80b9 	bmi.w	800167a <HAL_RCC_OscConfig+0x18a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	075d      	lsls	r5, r3, #29
 800150c:	d528      	bpl.n	8001560 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	4ba6      	ldr	r3, [pc, #664]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001514:	4da6      	ldr	r5, [pc, #664]	; (80017b0 <HAL_RCC_OscConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001518:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001530:	f7ff fc76 	bl	8000e20 <HAL_GetTick>
 8001534:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	05da      	lsls	r2, r3, #23
 800153a:	f140 80c0 	bpl.w	80016be <HAL_RCC_OscConfig+0x1ce>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153e:	4b9d      	ldr	r3, [pc, #628]	; (80017b4 <HAL_RCC_OscConfig+0x2c4>)
 8001540:	7a22      	ldrb	r2, [r4, #8]
 8001542:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001544:	68a3      	ldr	r3, [r4, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80c7 	beq.w	80016da <HAL_RCC_OscConfig+0x1ea>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fc68 	bl	8000e20 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	4d96      	ldr	r5, [pc, #600]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8001552:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800155a:	079b      	lsls	r3, r3, #30
 800155c:	f140 80b6 	bpl.w	80016cc <HAL_RCC_OscConfig+0x1dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001560:	69a2      	ldr	r2, [r4, #24]
 8001562:	2a00      	cmp	r2, #0
 8001564:	f040 80c9 	bne.w	80016fa <HAL_RCC_OscConfig+0x20a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001568:	2000      	movs	r0, #0
 800156a:	e015      	b.n	8001598 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156c:	4b8f      	ldr	r3, [pc, #572]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	f002 020c 	and.w	r2, r2, #12
 8001574:	2a04      	cmp	r2, #4
 8001576:	d007      	beq.n	8001588 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157e:	2a08      	cmp	r2, #8
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0xac>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	025a      	lsls	r2, r3, #9
 8001586:	d509      	bpl.n	800159c <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	039b      	lsls	r3, r3, #14
 800158e:	d5b4      	bpl.n	80014fa <HAL_RCC_OscConfig+0xa>
 8001590:	6863      	ldr	r3, [r4, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1b1      	bne.n	80014fa <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
}
 8001598:	b003      	add	sp, #12
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	4b86      	ldr	r3, [pc, #536]	; (80017b8 <HAL_RCC_OscConfig+0x2c8>)
 800159e:	7922      	ldrb	r2, [r4, #4]
 80015a0:	701a      	strb	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a2:	6863      	ldr	r3, [r4, #4]
 80015a4:	b16b      	cbz	r3, 80015c2 <HAL_RCC_OscConfig+0xd2>
        tickstart = HAL_GetTick();
 80015a6:	f7ff fc3b 	bl	8000e20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4d80      	ldr	r5, [pc, #512]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 80015ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	039f      	lsls	r7, r3, #14
 80015b2:	d4a2      	bmi.n	80014fa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fc34 	bl	8000e20 <HAL_GetTick>
 80015b8:	1b80      	subs	r0, r0, r6
 80015ba:	2864      	cmp	r0, #100	; 0x64
 80015bc:	d9f7      	bls.n	80015ae <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 80015be:	2003      	movs	r0, #3
 80015c0:	e7ea      	b.n	8001598 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
 80015c2:	f7ff fc2d 	bl	8000e20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4d79      	ldr	r5, [pc, #484]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 80015c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	0398      	lsls	r0, r3, #14
 80015ce:	d594      	bpl.n	80014fa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fc26 	bl	8000e20 <HAL_GetTick>
 80015d4:	1b80      	subs	r0, r0, r6
 80015d6:	2864      	cmp	r0, #100	; 0x64
 80015d8:	d9f7      	bls.n	80015ca <HAL_RCC_OscConfig+0xda>
 80015da:	e7f0      	b.n	80015be <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015dc:	4b73      	ldr	r3, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	f012 0f0c 	tst.w	r2, #12
 80015e4:	d007      	beq.n	80015f6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ec:	2a08      	cmp	r2, #8
 80015ee:	d116      	bne.n	800161e <HAL_RCC_OscConfig+0x12e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	0259      	lsls	r1, r3, #9
 80015f4:	d413      	bmi.n	800161e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	4b6d      	ldr	r3, [pc, #436]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	0792      	lsls	r2, r2, #30
 80015fc:	d502      	bpl.n	8001604 <HAL_RCC_OscConfig+0x114>
 80015fe:	68e2      	ldr	r2, [r4, #12]
 8001600:	2a01      	cmp	r2, #1
 8001602:	d1c8      	bne.n	8001596 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	22f8      	movs	r2, #248	; 0xf8
 8001608:	fa92 f2a2 	rbit	r2, r2
 800160c:	fab2 f182 	clz	r1, r2
 8001610:	6922      	ldr	r2, [r4, #16]
 8001612:	408a      	lsls	r2, r1
 8001614:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161c:	e770      	b.n	8001500 <HAL_RCC_OscConfig+0x10>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161e:	68e2      	ldr	r2, [r4, #12]
 8001620:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x2cc>)
 8001622:	b1da      	cbz	r2, 800165c <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_ENABLE();
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001628:	f7ff fbfa 	bl	8000e20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	4d5f      	ldr	r5, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 800162e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	079b      	lsls	r3, r3, #30
 8001634:	d50c      	bpl.n	8001650 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	6829      	ldr	r1, [r5, #0]
 8001638:	23f8      	movs	r3, #248	; 0xf8
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	fab3 f283 	clz	r2, r3
 8001642:	6923      	ldr	r3, [r4, #16]
 8001644:	4093      	lsls	r3, r2
 8001646:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800164a:	4313      	orrs	r3, r2
 800164c:	602b      	str	r3, [r5, #0]
 800164e:	e757      	b.n	8001500 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff fbe6 	bl	8000e20 <HAL_GetTick>
 8001654:	1b80      	subs	r0, r0, r6
 8001656:	2802      	cmp	r0, #2
 8001658:	d9ea      	bls.n	8001630 <HAL_RCC_OscConfig+0x140>
 800165a:	e7b0      	b.n	80015be <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_HSI_DISABLE();
 800165c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800165e:	f7ff fbdf 	bl	8000e20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4d52      	ldr	r5, [pc, #328]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8001664:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	079f      	lsls	r7, r3, #30
 800166a:	f57f af49 	bpl.w	8001500 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff fbd7 	bl	8000e20 <HAL_GetTick>
 8001672:	1b80      	subs	r0, r0, r6
 8001674:	2802      	cmp	r0, #2
 8001676:	d9f6      	bls.n	8001666 <HAL_RCC_OscConfig+0x176>
 8001678:	e7a1      	b.n	80015be <HAL_RCC_OscConfig+0xce>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800167a:	6962      	ldr	r2, [r4, #20]
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_OscConfig+0x2d0>)
 800167e:	b17a      	cbz	r2, 80016a0 <HAL_RCC_OscConfig+0x1b0>
      __HAL_RCC_LSI_ENABLE();
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001684:	f7ff fbcc 	bl	8000e20 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001688:	4d48      	ldr	r5, [pc, #288]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 800168a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800168e:	0798      	lsls	r0, r3, #30
 8001690:	f53f af3a 	bmi.w	8001508 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fbc4 	bl	8000e20 <HAL_GetTick>
 8001698:	1b80      	subs	r0, r0, r6
 800169a:	2802      	cmp	r0, #2
 800169c:	d9f6      	bls.n	800168c <HAL_RCC_OscConfig+0x19c>
 800169e:	e78e      	b.n	80015be <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_LSI_DISABLE();
 80016a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016a2:	f7ff fbbd 	bl	8000e20 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	4d41      	ldr	r5, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 80016a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016ac:	0799      	lsls	r1, r3, #30
 80016ae:	f57f af2b 	bpl.w	8001508 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fbb5 	bl	8000e20 <HAL_GetTick>
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	2802      	cmp	r0, #2
 80016ba:	d9f6      	bls.n	80016aa <HAL_RCC_OscConfig+0x1ba>
 80016bc:	e77f      	b.n	80015be <HAL_RCC_OscConfig+0xce>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7ff fbaf 	bl	8000e20 <HAL_GetTick>
 80016c2:	1b80      	subs	r0, r0, r6
 80016c4:	2802      	cmp	r0, #2
 80016c6:	f67f af36 	bls.w	8001536 <HAL_RCC_OscConfig+0x46>
 80016ca:	e778      	b.n	80015be <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fba8 	bl	8000e20 <HAL_GetTick>
 80016d0:	1b80      	subs	r0, r0, r6
 80016d2:	42b8      	cmp	r0, r7
 80016d4:	f67f af40 	bls.w	8001558 <HAL_RCC_OscConfig+0x68>
 80016d8:	e771      	b.n	80015be <HAL_RCC_OscConfig+0xce>
      tickstart = HAL_GetTick();
 80016da:	f7ff fba1 	bl	8000e20 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016de:	4d33      	ldr	r5, [pc, #204]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 80016e0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016e8:	0798      	lsls	r0, r3, #30
 80016ea:	f57f af39 	bpl.w	8001560 <HAL_RCC_OscConfig+0x70>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fb97 	bl	8000e20 <HAL_GetTick>
 80016f2:	1b80      	subs	r0, r0, r6
 80016f4:	42b8      	cmp	r0, r7
 80016f6:	d9f6      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
 80016f8:	e761      	b.n	80015be <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016fa:	4d2c      	ldr	r5, [pc, #176]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
 80016fc:	68ab      	ldr	r3, [r5, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	f43f af47 	beq.w	8001596 <HAL_RCC_OscConfig+0xa6>
 8001708:	4e2e      	ldr	r6, [pc, #184]	; (80017c4 <HAL_RCC_OscConfig+0x2d4>)
 800170a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800170e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001710:	d13e      	bne.n	8001790 <HAL_RCC_OscConfig+0x2a0>
        tickstart = HAL_GetTick();
 8001712:	f7ff fb85 	bl	8000e20 <HAL_GetTick>
 8001716:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	0199      	lsls	r1, r3, #6
 800171c:	d432      	bmi.n	8001784 <HAL_RCC_OscConfig+0x294>
 800171e:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001722:	fa97 f7a7 	rbit	r7, r7
 8001726:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800172a:	fab7 f787 	clz	r7, r7
 800172e:	fa92 f2a2 	rbit	r2, r2
 8001732:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001736:	fab2 f082 	clz	r0, r2
 800173a:	fa91 f1a1 	rbit	r1, r1
 800173e:	6a22      	ldr	r2, [r4, #32]
 8001740:	69e3      	ldr	r3, [r4, #28]
 8001742:	4313      	orrs	r3, r2
 8001744:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001746:	fa02 f707 	lsl.w	r7, r2, r7
 800174a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800174c:	0852      	lsrs	r2, r2, #1
 800174e:	3a01      	subs	r2, #1
 8001750:	4082      	lsls	r2, r0
 8001752:	433b      	orrs	r3, r7
 8001754:	4313      	orrs	r3, r2
 8001756:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001758:	4c14      	ldr	r4, [pc, #80]	; (80017ac <HAL_RCC_OscConfig+0x2bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175a:	fab1 f181 	clz	r1, r1
 800175e:	fa02 f101 	lsl.w	r1, r2, r1
 8001762:	430b      	orrs	r3, r1
 8001764:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001766:	2301      	movs	r3, #1
 8001768:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800176a:	f7ff fb59 	bl	8000e20 <HAL_GetTick>
 800176e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	019a      	lsls	r2, r3, #6
 8001774:	f53f aef8 	bmi.w	8001568 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fb52 	bl	8000e20 <HAL_GetTick>
 800177c:	1b40      	subs	r0, r0, r5
 800177e:	2802      	cmp	r0, #2
 8001780:	d9f6      	bls.n	8001770 <HAL_RCC_OscConfig+0x280>
 8001782:	e71c      	b.n	80015be <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fb4c 	bl	8000e20 <HAL_GetTick>
 8001788:	1bc0      	subs	r0, r0, r7
 800178a:	2802      	cmp	r0, #2
 800178c:	d9c4      	bls.n	8001718 <HAL_RCC_OscConfig+0x228>
 800178e:	e716      	b.n	80015be <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8001790:	f7ff fb46 	bl	8000e20 <HAL_GetTick>
 8001794:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	682b      	ldr	r3, [r5, #0]
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	f57f aee5 	bpl.w	8001568 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fb3f 	bl	8000e20 <HAL_GetTick>
 80017a2:	1b00      	subs	r0, r0, r4
 80017a4:	2802      	cmp	r0, #2
 80017a6:	d9f6      	bls.n	8001796 <HAL_RCC_OscConfig+0x2a6>
 80017a8:	e709      	b.n	80015be <HAL_RCC_OscConfig+0xce>
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
 80017b4:	40023870 	.word	0x40023870
 80017b8:	40023802 	.word	0x40023802
 80017bc:	42470000 	.word	0x42470000
 80017c0:	42470e80 	.word	0x42470e80
 80017c4:	42470060 	.word	0x42470060

080017c8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017c8:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <HAL_RCC_ClockConfig+0x13c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f002 020f 	and.w	r2, r2, #15
 80017d0:	428a      	cmp	r2, r1
{
 80017d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d6:	4605      	mov	r5, r0
 80017d8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017da:	d31d      	bcc.n	8001818 <HAL_RCC_ClockConfig+0x50>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	682a      	ldr	r2, [r5, #0]
 80017de:	0794      	lsls	r4, r2, #30
 80017e0:	d424      	bmi.n	800182c <HAL_RCC_ClockConfig+0x64>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	07d0      	lsls	r0, r2, #31
 80017e4:	d42a      	bmi.n	800183c <HAL_RCC_ClockConfig+0x74>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_ClockConfig+0x13c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f002 020f 	and.w	r2, r2, #15
 80017ee:	4296      	cmp	r6, r2
 80017f0:	d378      	bcc.n	80018e4 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f2:	682a      	ldr	r2, [r5, #0]
 80017f4:	0751      	lsls	r1, r2, #29
 80017f6:	d47d      	bmi.n	80018f4 <HAL_RCC_ClockConfig+0x12c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	0713      	lsls	r3, r2, #28
 80017fa:	d507      	bpl.n	800180c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017fc:	4a42      	ldr	r2, [pc, #264]	; (8001908 <HAL_RCC_ClockConfig+0x140>)
 80017fe:	6929      	ldr	r1, [r5, #16]
 8001800:	6893      	ldr	r3, [r2, #8]
 8001802:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001806:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800180a:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff fad3 	bl	8000db8 <HAL_InitTick>
  
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
}
 8001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001818:	b2ca      	uxtb	r2, r1
 800181a:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4299      	cmp	r1, r3
 8001824:	d0da      	beq.n	80017dc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001826:	2001      	movs	r0, #1
 8001828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4936      	ldr	r1, [pc, #216]	; (8001908 <HAL_RCC_ClockConfig+0x140>)
 800182e:	68a8      	ldr	r0, [r5, #8]
 8001830:	688b      	ldr	r3, [r1, #8]
 8001832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001836:	4303      	orrs	r3, r0
 8001838:	608b      	str	r3, [r1, #8]
 800183a:	e7d2      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183c:	686a      	ldr	r2, [r5, #4]
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_RCC_ClockConfig+0x140>)
 8001840:	2a01      	cmp	r2, #1
 8001842:	d11e      	bne.n	8001882 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	d0ec      	beq.n	8001826 <HAL_RCC_ClockConfig+0x5e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184c:	4c2e      	ldr	r4, [pc, #184]	; (8001908 <HAL_RCC_ClockConfig+0x140>)
 800184e:	68a3      	ldr	r3, [r4, #8]
 8001850:	f023 0303 	bic.w	r3, r3, #3
 8001854:	4313      	orrs	r3, r2
 8001856:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001858:	f7ff fae2 	bl	8000e20 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185c:	686b      	ldr	r3, [r5, #4]
 800185e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001860:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	d118      	bne.n	8001896 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001868:	68a3      	ldr	r3, [r4, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d0b9      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001872:	f7ff fad5 	bl	8000e20 <HAL_GetTick>
 8001876:	1bc0      	subs	r0, r0, r7
 8001878:	4540      	cmp	r0, r8
 800187a:	d9f5      	bls.n	8001868 <HAL_RCC_ClockConfig+0xa0>
          return HAL_TIMEOUT;
 800187c:	2003      	movs	r0, #3
 800187e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001882:	1e91      	subs	r1, r2, #2
 8001884:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001888:	d802      	bhi.n	8001890 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800188e:	e7dc      	b.n	800184a <HAL_RCC_ClockConfig+0x82>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	f013 0f02 	tst.w	r3, #2
 8001894:	e7d9      	b.n	800184a <HAL_RCC_ClockConfig+0x82>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	2b02      	cmp	r3, #2
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189e:	68a3      	ldr	r3, [r4, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d09e      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff faba 	bl	8000e20 <HAL_GetTick>
 80018ac:	1bc0      	subs	r0, r0, r7
 80018ae:	4540      	cmp	r0, r8
 80018b0:	d9f5      	bls.n	800189e <HAL_RCC_ClockConfig+0xd6>
 80018b2:	e7e3      	b.n	800187c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d112      	bne.n	80018de <HAL_RCC_ClockConfig+0x116>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f241 3588 	movw	r5, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80018bc:	68a3      	ldr	r3, [r4, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018be:	f7ff faaf 	bl	8000e20 <HAL_GetTick>
 80018c2:	1bc0      	subs	r0, r0, r7
 80018c4:	42a8      	cmp	r0, r5
 80018c6:	d9f9      	bls.n	80018bc <HAL_RCC_ClockConfig+0xf4>
 80018c8:	e7d8      	b.n	800187c <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ca:	f7ff faa9 	bl	8000e20 <HAL_GetTick>
 80018ce:	1bc0      	subs	r0, r0, r7
 80018d0:	4540      	cmp	r0, r8
 80018d2:	d8d3      	bhi.n	800187c <HAL_RCC_ClockConfig+0xb4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d4:	68a3      	ldr	r3, [r4, #8]
 80018d6:	f013 0f0c 	tst.w	r3, #12
 80018da:	d1f6      	bne.n	80018ca <HAL_RCC_ClockConfig+0x102>
 80018dc:	e783      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018de:	f241 3888 	movw	r8, #5000	; 0x1388
 80018e2:	e7f7      	b.n	80018d4 <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e4:	b2f2      	uxtb	r2, r6
 80018e6:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	429e      	cmp	r6, r3
 80018f0:	d199      	bne.n	8001826 <HAL_RCC_ClockConfig+0x5e>
 80018f2:	e77e      	b.n	80017f2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f4:	4904      	ldr	r1, [pc, #16]	; (8001908 <HAL_RCC_ClockConfig+0x140>)
 80018f6:	68e8      	ldr	r0, [r5, #12]
 80018f8:	688b      	ldr	r3, [r1, #8]
 80018fa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018fe:	4303      	orrs	r3, r0
 8001900:	608b      	str	r3, [r1, #8]
 8001902:	e779      	b.n	80017f8 <HAL_RCC_ClockConfig+0x30>
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_RCC_GetSysClockFreq+0x68>)
 800190e:	6893      	ldr	r3, [r2, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b04      	cmp	r3, #4
{
 8001916:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	d003      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x16>
 800191a:	2b08      	cmp	r3, #8
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800191e:	4816      	ldr	r0, [pc, #88]	; (8001978 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001920:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001922:	4816      	ldr	r0, [pc, #88]	; (800197c <HAL_RCC_GetSysClockFreq+0x70>)
 8001924:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001926:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001928:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001932:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001936:	6853      	ldr	r3, [r2, #4]
 8001938:	fa94 f0a4 	rbit	r0, r4
 800193c:	fab0 f080 	clz	r0, r0
 8001940:	ea03 0304 	and.w	r3, r3, r4
 8001944:	fa23 f300 	lsr.w	r3, r3, r0
 8001948:	bf14      	ite	ne
 800194a:	480c      	ldrne	r0, [pc, #48]	; (800197c <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800194c:	480a      	ldreq	r0, [pc, #40]	; (8001978 <HAL_RCC_GetSysClockFreq+0x6c>)
 800194e:	fbb0 f0f1 	udiv	r0, r0, r1
 8001952:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_RCC_GetSysClockFreq+0x68>)
 8001956:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	fa92 f2a2 	rbit	r2, r2
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001968:	40d3      	lsrs	r3, r2
 800196a:	3301      	adds	r3, #1
 800196c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800196e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001972:	bd10      	pop	{r4, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	00f42400 	.word	0x00f42400
 800197c:	017d7840 	.word	0x017d7840

08001980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001980:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001982:	f7ff ffc3 	bl	800190c <HAL_RCC_GetSysClockFreq>
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x28>)
 8001988:	22f0      	movs	r2, #240	; 0xf0
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	fa92 f2a2 	rbit	r2, r2
 8001990:	fab2 f282 	clz	r2, r2
 8001994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001998:	40d3      	lsrs	r3, r2
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_RCC_GetHCLKFreq+0x2c>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	40d8      	lsrs	r0, r3
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_RCC_GetHCLKFreq+0x30>)
 80019a2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80019a4:	bd08      	pop	{r3, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	080025c8 	.word	0x080025c8
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80019b4:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 80019bc:	6813      	ldr	r3, [r2, #0]
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 80019ca:	2000      	movs	r0, #0
 80019cc:	4770      	bx	lr
	...

080019d0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80019d2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80019d4:	4290      	cmp	r0, r2
 80019d6:	d012      	beq.n	80019fe <TIM_Base_SetConfig+0x2e>
 80019d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019dc:	d00f      	beq.n	80019fe <TIM_Base_SetConfig+0x2e>
 80019de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019e2:	4290      	cmp	r0, r2
 80019e4:	d00b      	beq.n	80019fe <TIM_Base_SetConfig+0x2e>
 80019e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ea:	4290      	cmp	r0, r2
 80019ec:	d007      	beq.n	80019fe <TIM_Base_SetConfig+0x2e>
 80019ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f2:	4290      	cmp	r0, r2
 80019f4:	d003      	beq.n	80019fe <TIM_Base_SetConfig+0x2e>
 80019f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80019fa:	4290      	cmp	r0, r2
 80019fc:	d11d      	bne.n	8001a3a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80019fe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a04:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <TIM_Base_SetConfig+0xbc>)
 8001a08:	4290      	cmp	r0, r2
 8001a0a:	d104      	bne.n	8001a16 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a0c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a12:	4313      	orrs	r3, r2
 8001a14:	e028      	b.n	8001a68 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a1a:	d0f7      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <TIM_Base_SetConfig+0xc0>)
 8001a1e:	4290      	cmp	r0, r2
 8001a20:	d0f4      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a26:	4290      	cmp	r0, r2
 8001a28:	d0f0      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2e:	4290      	cmp	r0, r2
 8001a30:	d0ec      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a36:	4290      	cmp	r0, r2
 8001a38:	d0e8      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <TIM_Base_SetConfig+0xc4>)
 8001a3c:	4290      	cmp	r0, r2
 8001a3e:	d0e5      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a44:	4290      	cmp	r0, r2
 8001a46:	d0e1      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a4c:	4290      	cmp	r0, r2
 8001a4e:	d0dd      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a50:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a54:	4290      	cmp	r0, r2
 8001a56:	d0d9      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5c:	4290      	cmp	r0, r2
 8001a5e:	d0d5      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
 8001a60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a64:	4290      	cmp	r0, r2
 8001a66:	d0d1      	beq.n	8001a0c <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8001a68:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a6a:	688b      	ldr	r3, [r1, #8]
 8001a6c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a6e:	680b      	ldr	r3, [r1, #0]
 8001a70:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <TIM_Base_SetConfig+0xbc>)
 8001a74:	4298      	cmp	r0, r3
 8001a76:	d006      	beq.n	8001a86 <TIM_Base_SetConfig+0xb6>
 8001a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a7c:	4298      	cmp	r0, r3
 8001a7e:	d002      	beq.n	8001a86 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a80:	2301      	movs	r3, #1
 8001a82:	6143      	str	r3, [r0, #20]
}
 8001a84:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001a86:	690b      	ldr	r3, [r1, #16]
 8001a88:	6303      	str	r3, [r0, #48]	; 0x30
 8001a8a:	e7f9      	b.n	8001a80 <TIM_Base_SetConfig+0xb0>
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40014000 	.word	0x40014000

08001a98 <HAL_TIM_Base_Init>:
{ 
 8001a98:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	b1a0      	cbz	r0, 8001ac8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001aa2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aa6:	b91b      	cbnz	r3, 8001ab0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001aa8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001aac:	f7ff f8f0 	bl	8000c90 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001ab6:	6820      	ldr	r0, [r4, #0]
 8001ab8:	1d21      	adds	r1, r4, #4
 8001aba:	f7ff ff89 	bl	80019d0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ac8:	2001      	movs	r0, #1
}
 8001aca:	bd10      	pop	{r4, pc}

08001acc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001acc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ad0:	2b01      	cmp	r3, #1
{
 8001ad2:	b510      	push	{r4, lr}
 8001ad4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001ad8:	d018      	beq.n	8001b0c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001ada:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ade:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001ae0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ae2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ae4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ae6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aea:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4322      	orrs	r2, r4
 8001af0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001b06:	2300      	movs	r3, #0
 8001b08:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001b0c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001b0e:	bd10      	pop	{r4, pc}

08001b10 <__libc_init_array>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4e0d      	ldr	r6, [pc, #52]	; (8001b48 <__libc_init_array+0x38>)
 8001b14:	4c0d      	ldr	r4, [pc, #52]	; (8001b4c <__libc_init_array+0x3c>)
 8001b16:	1ba4      	subs	r4, r4, r6
 8001b18:	10a4      	asrs	r4, r4, #2
 8001b1a:	2500      	movs	r5, #0
 8001b1c:	42a5      	cmp	r5, r4
 8001b1e:	d109      	bne.n	8001b34 <__libc_init_array+0x24>
 8001b20:	4e0b      	ldr	r6, [pc, #44]	; (8001b50 <__libc_init_array+0x40>)
 8001b22:	4c0c      	ldr	r4, [pc, #48]	; (8001b54 <__libc_init_array+0x44>)
 8001b24:	f000 fd40 	bl	80025a8 <_init>
 8001b28:	1ba4      	subs	r4, r4, r6
 8001b2a:	10a4      	asrs	r4, r4, #2
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	42a5      	cmp	r5, r4
 8001b30:	d105      	bne.n	8001b3e <__libc_init_array+0x2e>
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
 8001b34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b38:	4798      	blx	r3
 8001b3a:	3501      	adds	r5, #1
 8001b3c:	e7ee      	b.n	8001b1c <__libc_init_array+0xc>
 8001b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b42:	4798      	blx	r3
 8001b44:	3501      	adds	r5, #1
 8001b46:	e7f2      	b.n	8001b2e <__libc_init_array+0x1e>
 8001b48:	080029a8 	.word	0x080029a8
 8001b4c:	080029a8 	.word	0x080029a8
 8001b50:	080029a8 	.word	0x080029a8
 8001b54:	080029ac 	.word	0x080029ac

08001b58 <sinf>:
 8001b58:	ee10 3a10 	vmov	r3, s0
 8001b5c:	b507      	push	{r0, r1, r2, lr}
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <sinf+0x7c>)
 8001b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b64:	4293      	cmp	r3, r2
 8001b66:	dc05      	bgt.n	8001b74 <sinf+0x1c>
 8001b68:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001bd8 <sinf+0x80>
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f000 fc1d 	bl	80023ac <__kernel_sinf>
 8001b72:	e004      	b.n	8001b7e <sinf+0x26>
 8001b74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8001b78:	db04      	blt.n	8001b84 <sinf+0x2c>
 8001b7a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8001b7e:	b003      	add	sp, #12
 8001b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b84:	4668      	mov	r0, sp
 8001b86:	f000 f829 	bl	8001bdc <__ieee754_rem_pio2f>
 8001b8a:	f000 0003 	and.w	r0, r0, #3
 8001b8e:	2801      	cmp	r0, #1
 8001b90:	d008      	beq.n	8001ba4 <sinf+0x4c>
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d00d      	beq.n	8001bb2 <sinf+0x5a>
 8001b96:	b9b0      	cbnz	r0, 8001bc6 <sinf+0x6e>
 8001b98:	2001      	movs	r0, #1
 8001b9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8001b9e:	ed9d 0a00 	vldr	s0, [sp]
 8001ba2:	e7e4      	b.n	8001b6e <sinf+0x16>
 8001ba4:	eddd 0a01 	vldr	s1, [sp, #4]
 8001ba8:	ed9d 0a00 	vldr	s0, [sp]
 8001bac:	f000 f942 	bl	8001e34 <__kernel_cosf>
 8001bb0:	e7e5      	b.n	8001b7e <sinf+0x26>
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8001bb8:	ed9d 0a00 	vldr	s0, [sp]
 8001bbc:	f000 fbf6 	bl	80023ac <__kernel_sinf>
 8001bc0:	eeb1 0a40 	vneg.f32	s0, s0
 8001bc4:	e7db      	b.n	8001b7e <sinf+0x26>
 8001bc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8001bca:	ed9d 0a00 	vldr	s0, [sp]
 8001bce:	f000 f931 	bl	8001e34 <__kernel_cosf>
 8001bd2:	e7f5      	b.n	8001bc0 <sinf+0x68>
 8001bd4:	3f490fd8 	.word	0x3f490fd8
 8001bd8:	00000000 	.word	0x00000000

08001bdc <__ieee754_rem_pio2f>:
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bde:	ee10 6a10 	vmov	r6, s0
 8001be2:	4b86      	ldr	r3, [pc, #536]	; (8001dfc <__ieee754_rem_pio2f+0x220>)
 8001be4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8001be8:	429c      	cmp	r4, r3
 8001bea:	b087      	sub	sp, #28
 8001bec:	4605      	mov	r5, r0
 8001bee:	dc05      	bgt.n	8001bfc <__ieee754_rem_pio2f+0x20>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	ed85 0a00 	vstr	s0, [r5]
 8001bf6:	6043      	str	r3, [r0, #4]
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	e020      	b.n	8001c3e <__ieee754_rem_pio2f+0x62>
 8001bfc:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <__ieee754_rem_pio2f+0x224>)
 8001bfe:	429c      	cmp	r4, r3
 8001c00:	dc38      	bgt.n	8001c74 <__ieee754_rem_pio2f+0x98>
 8001c02:	2e00      	cmp	r6, #0
 8001c04:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001e04 <__ieee754_rem_pio2f+0x228>
 8001c08:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <__ieee754_rem_pio2f+0x22c>)
 8001c0a:	f024 040f 	bic.w	r4, r4, #15
 8001c0e:	dd18      	ble.n	8001c42 <__ieee754_rem_pio2f+0x66>
 8001c10:	429c      	cmp	r4, r3
 8001c12:	ee70 7a47 	vsub.f32	s15, s0, s14
 8001c16:	bf09      	itett	eq
 8001c18:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8001e0c <__ieee754_rem_pio2f+0x230>
 8001c1c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8001e10 <__ieee754_rem_pio2f+0x234>
 8001c20:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8001c24:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8001e14 <__ieee754_rem_pio2f+0x238>
 8001c28:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8001c2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001c30:	edc0 6a00 	vstr	s13, [r0]
 8001c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c38:	edc0 7a01 	vstr	s15, [r0, #4]
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	b007      	add	sp, #28
 8001c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c42:	429c      	cmp	r4, r3
 8001c44:	ee70 7a07 	vadd.f32	s15, s0, s14
 8001c48:	bf09      	itett	eq
 8001c4a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8001e0c <__ieee754_rem_pio2f+0x230>
 8001c4e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8001e10 <__ieee754_rem_pio2f+0x234>
 8001c52:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8001c56:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8001e14 <__ieee754_rem_pio2f+0x238>
 8001c5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001c5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001c62:	edc0 6a00 	vstr	s13, [r0]
 8001c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c6a:	edc0 7a01 	vstr	s15, [r0, #4]
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c72:	e7e4      	b.n	8001c3e <__ieee754_rem_pio2f+0x62>
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <__ieee754_rem_pio2f+0x23c>)
 8001c76:	429c      	cmp	r4, r3
 8001c78:	dc71      	bgt.n	8001d5e <__ieee754_rem_pio2f+0x182>
 8001c7a:	f000 fbdf 	bl	800243c <fabsf>
 8001c7e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001e1c <__ieee754_rem_pio2f+0x240>
 8001c82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001c86:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001c92:	ee17 0a90 	vmov	r0, s15
 8001c96:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001e04 <__ieee754_rem_pio2f+0x228>
 8001c9a:	eeb1 7a46 	vneg.f32	s14, s12
 8001c9e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8001e10 <__ieee754_rem_pio2f+0x234>
 8001ca8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cac:	ee70 6a67 	vsub.f32	s13, s0, s15
 8001cb0:	ee16 3a90 	vmov	r3, s13
 8001cb4:	dc1c      	bgt.n	8001cf0 <__ieee754_rem_pio2f+0x114>
 8001cb6:	1e47      	subs	r7, r0, #1
 8001cb8:	4959      	ldr	r1, [pc, #356]	; (8001e20 <__ieee754_rem_pio2f+0x244>)
 8001cba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8001cbe:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d014      	beq.n	8001cf0 <__ieee754_rem_pio2f+0x114>
 8001cc6:	602b      	str	r3, [r5, #0]
 8001cc8:	ed95 7a00 	vldr	s14, [r5]
 8001ccc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001cd0:	2e00      	cmp	r6, #0
 8001cd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001cd6:	ed85 0a01 	vstr	s0, [r5, #4]
 8001cda:	dab0      	bge.n	8001c3e <__ieee754_rem_pio2f+0x62>
 8001cdc:	eeb1 7a47 	vneg.f32	s14, s14
 8001ce0:	eeb1 0a40 	vneg.f32	s0, s0
 8001ce4:	ed85 7a00 	vstr	s14, [r5]
 8001ce8:	ed85 0a01 	vstr	s0, [r5, #4]
 8001cec:	4240      	negs	r0, r0
 8001cee:	e7a6      	b.n	8001c3e <__ieee754_rem_pio2f+0x62>
 8001cf0:	15e4      	asrs	r4, r4, #23
 8001cf2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8001cf6:	1aa2      	subs	r2, r4, r2
 8001cf8:	2a08      	cmp	r2, #8
 8001cfa:	dde4      	ble.n	8001cc6 <__ieee754_rem_pio2f+0xea>
 8001cfc:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001e0c <__ieee754_rem_pio2f+0x230>
 8001d00:	eef0 6a40 	vmov.f32	s13, s0
 8001d04:	eee7 6a27 	vfma.f32	s13, s14, s15
 8001d08:	ee30 0a66 	vsub.f32	s0, s0, s13
 8001d0c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001d10:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001e14 <__ieee754_rem_pio2f+0x238>
 8001d14:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8001d18:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8001d1c:	eef0 7a40 	vmov.f32	s15, s0
 8001d20:	ee15 3a90 	vmov	r3, s11
 8001d24:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8001d28:	1aa4      	subs	r4, r4, r2
 8001d2a:	2c19      	cmp	r4, #25
 8001d2c:	dc04      	bgt.n	8001d38 <__ieee754_rem_pio2f+0x15c>
 8001d2e:	edc5 5a00 	vstr	s11, [r5]
 8001d32:	eeb0 0a66 	vmov.f32	s0, s13
 8001d36:	e7c7      	b.n	8001cc8 <__ieee754_rem_pio2f+0xec>
 8001d38:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8001e24 <__ieee754_rem_pio2f+0x248>
 8001d3c:	eeb0 0a66 	vmov.f32	s0, s13
 8001d40:	eea7 0a25 	vfma.f32	s0, s14, s11
 8001d44:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8001d48:	eee7 7a25 	vfma.f32	s15, s14, s11
 8001d4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e28 <__ieee754_rem_pio2f+0x24c>
 8001d50:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8001d54:	ee30 7a67 	vsub.f32	s14, s0, s15
 8001d58:	ed85 7a00 	vstr	s14, [r5]
 8001d5c:	e7b4      	b.n	8001cc8 <__ieee754_rem_pio2f+0xec>
 8001d5e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8001d62:	db06      	blt.n	8001d72 <__ieee754_rem_pio2f+0x196>
 8001d64:	ee70 7a40 	vsub.f32	s15, s0, s0
 8001d68:	edc0 7a01 	vstr	s15, [r0, #4]
 8001d6c:	edc0 7a00 	vstr	s15, [r0]
 8001d70:	e742      	b.n	8001bf8 <__ieee754_rem_pio2f+0x1c>
 8001d72:	15e2      	asrs	r2, r4, #23
 8001d74:	3a86      	subs	r2, #134	; 0x86
 8001d76:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001d82:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001e2c <__ieee754_rem_pio2f+0x250>
 8001d86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d8e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8001d92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001da2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8001da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001daa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	edcd 7a05 	vstr	s15, [sp, #20]
 8001db6:	d11e      	bne.n	8001df6 <__ieee754_rem_pio2f+0x21a>
 8001db8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	bf14      	ite	ne
 8001dc2:	2302      	movne	r3, #2
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	491a      	ldr	r1, [pc, #104]	; (8001e30 <__ieee754_rem_pio2f+0x254>)
 8001dc8:	9101      	str	r1, [sp, #4]
 8001dca:	2102      	movs	r1, #2
 8001dcc:	9100      	str	r1, [sp, #0]
 8001dce:	a803      	add	r0, sp, #12
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f000 f88d 	bl	8001ef0 <__kernel_rem_pio2f>
 8001dd6:	2e00      	cmp	r6, #0
 8001dd8:	f6bf af31 	bge.w	8001c3e <__ieee754_rem_pio2f+0x62>
 8001ddc:	edd5 7a00 	vldr	s15, [r5]
 8001de0:	eef1 7a67 	vneg.f32	s15, s15
 8001de4:	edc5 7a00 	vstr	s15, [r5]
 8001de8:	edd5 7a01 	vldr	s15, [r5, #4]
 8001dec:	eef1 7a67 	vneg.f32	s15, s15
 8001df0:	edc5 7a01 	vstr	s15, [r5, #4]
 8001df4:	e77a      	b.n	8001cec <__ieee754_rem_pio2f+0x110>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e7e5      	b.n	8001dc6 <__ieee754_rem_pio2f+0x1ea>
 8001dfa:	bf00      	nop
 8001dfc:	3f490fd8 	.word	0x3f490fd8
 8001e00:	4016cbe3 	.word	0x4016cbe3
 8001e04:	3fc90f80 	.word	0x3fc90f80
 8001e08:	3fc90fd0 	.word	0x3fc90fd0
 8001e0c:	37354400 	.word	0x37354400
 8001e10:	37354443 	.word	0x37354443
 8001e14:	2e85a308 	.word	0x2e85a308
 8001e18:	43490f80 	.word	0x43490f80
 8001e1c:	3f22f984 	.word	0x3f22f984
 8001e20:	080025d8 	.word	0x080025d8
 8001e24:	2e85a300 	.word	0x2e85a300
 8001e28:	248d3132 	.word	0x248d3132
 8001e2c:	43800000 	.word	0x43800000
 8001e30:	08002658 	.word	0x08002658

08001e34 <__kernel_cosf>:
 8001e34:	ee10 3a10 	vmov	r3, s0
 8001e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8001e40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e44:	da05      	bge.n	8001e52 <__kernel_cosf+0x1e>
 8001e46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001e4a:	ee17 2a90 	vmov	r2, s15
 8001e4e:	2a00      	cmp	r2, #0
 8001e50:	d03b      	beq.n	8001eca <__kernel_cosf+0x96>
 8001e52:	ee20 7a00 	vmul.f32	s14, s0, s0
 8001e56:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8001ed0 <__kernel_cosf+0x9c>
 8001e5a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8001ed4 <__kernel_cosf+0xa0>
 8001e5e:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8001ed8 <__kernel_cosf+0xa4>
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <__kernel_cosf+0xa8>)
 8001e64:	eea7 6a27 	vfma.f32	s12, s14, s15
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	ee60 0a20 	vmul.f32	s1, s0, s1
 8001e6e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8001e72:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8001ee0 <__kernel_cosf+0xac>
 8001e76:	eea7 6a25 	vfma.f32	s12, s14, s11
 8001e7a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8001ee4 <__kernel_cosf+0xb0>
 8001e7e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8001e82:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8001ee8 <__kernel_cosf+0xb4>
 8001e86:	eea7 6a25 	vfma.f32	s12, s14, s11
 8001e8a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e8e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8001e92:	dc06      	bgt.n	8001ea2 <__kernel_cosf+0x6e>
 8001e94:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8001e98:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8001e9c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8001ea0:	4770      	bx	lr
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <__kernel_cosf+0xb8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bfda      	itte	le
 8001ea8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8001eac:	ee07 3a90 	vmovle	s15, r3
 8001eb0:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8001eb4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001eb8:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8001ebc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8001ec0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8001ec4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8001ec8:	4770      	bx	lr
 8001eca:	eeb0 0a66 	vmov.f32	s0, s13
 8001ece:	4770      	bx	lr
 8001ed0:	310f74f6 	.word	0x310f74f6
 8001ed4:	ad47d74e 	.word	0xad47d74e
 8001ed8:	b493f27c 	.word	0xb493f27c
 8001edc:	3e999999 	.word	0x3e999999
 8001ee0:	37d00d01 	.word	0x37d00d01
 8001ee4:	bab60b61 	.word	0xbab60b61
 8001ee8:	3d2aaaab 	.word	0x3d2aaaab
 8001eec:	3f480000 	.word	0x3f480000

08001ef0 <__kernel_rem_pio2f>:
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef4:	ed2d 8b04 	vpush	{d8-d9}
 8001ef8:	b0d7      	sub	sp, #348	; 0x15c
 8001efa:	468b      	mov	fp, r1
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	9964      	ldr	r1, [sp, #400]	; 0x190
 8001f00:	4bcb      	ldr	r3, [pc, #812]	; (8002230 <__kernel_rem_pio2f+0x340>)
 8001f02:	9002      	str	r0, [sp, #8]
 8001f04:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8001f08:	9b01      	ldr	r3, [sp, #4]
 8001f0a:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8001f0c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8002240 <__kernel_rem_pio2f+0x350>
 8001f10:	3b01      	subs	r3, #1
 8001f12:	1ed0      	subs	r0, r2, #3
 8001f14:	2408      	movs	r4, #8
 8001f16:	fb90 f0f4 	sdiv	r0, r0, r4
 8001f1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8001f1e:	1c45      	adds	r5, r0, #1
 8001f20:	1ac7      	subs	r7, r0, r3
 8001f22:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8001f26:	eb0a 0e03 	add.w	lr, sl, r3
 8001f2a:	ac1a      	add	r4, sp, #104	; 0x68
 8001f2c:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8001f30:	2200      	movs	r2, #0
 8001f32:	4572      	cmp	r2, lr
 8001f34:	dd0f      	ble.n	8001f56 <__kernel_rem_pio2f+0x66>
 8001f36:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8001f3a:	2400      	movs	r4, #0
 8001f3c:	4554      	cmp	r4, sl
 8001f3e:	dc26      	bgt.n	8001f8e <__kernel_rem_pio2f+0x9e>
 8001f40:	9a01      	ldr	r2, [sp, #4]
 8001f42:	9f02      	ldr	r7, [sp, #8]
 8001f44:	eddf 7abe 	vldr	s15, [pc, #760]	; 8002240 <__kernel_rem_pio2f+0x350>
 8001f48:	4422      	add	r2, r4
 8001f4a:	a91a      	add	r1, sp, #104	; 0x68
 8001f4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001f50:	f04f 0c00 	mov.w	ip, #0
 8001f54:	e015      	b.n	8001f82 <__kernel_rem_pio2f+0x92>
 8001f56:	42d7      	cmn	r7, r2
 8001f58:	bf5d      	ittte	pl
 8001f5a:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8001f5e:	ee07 1a90 	vmovpl	s15, r1
 8001f62:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8001f66:	eef0 7a47 	vmovmi.f32	s15, s14
 8001f6a:	ece4 7a01 	vstmia	r4!, {s15}
 8001f6e:	3201      	adds	r2, #1
 8001f70:	e7df      	b.n	8001f32 <__kernel_rem_pio2f+0x42>
 8001f72:	ecf7 6a01 	vldmia	r7!, {s13}
 8001f76:	ed32 7a01 	vldmdb	r2!, {s14}
 8001f7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001f7e:	f10c 0c01 	add.w	ip, ip, #1
 8001f82:	459c      	cmp	ip, r3
 8001f84:	ddf5      	ble.n	8001f72 <__kernel_rem_pio2f+0x82>
 8001f86:	ecee 7a01 	vstmia	lr!, {s15}
 8001f8a:	3401      	adds	r4, #1
 8001f8c:	e7d6      	b.n	8001f3c <__kernel_rem_pio2f+0x4c>
 8001f8e:	aa06      	add	r2, sp, #24
 8001f90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8001f94:	9204      	str	r2, [sp, #16]
 8001f96:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8002234 <__kernel_rem_pio2f+0x344>
 8001f9a:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8002238 <__kernel_rem_pio2f+0x348>
 8001f9e:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8001fa2:	9203      	str	r2, [sp, #12]
 8001fa4:	4657      	mov	r7, sl
 8001fa6:	aa56      	add	r2, sp, #344	; 0x158
 8001fa8:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8001fac:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8001fb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8001fb4:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8001fb8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8001fbc:	aa56      	add	r2, sp, #344	; 0x158
 8001fbe:	eb02 0008 	add.w	r0, r2, r8
 8001fc2:	384c      	subs	r0, #76	; 0x4c
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	1abc      	subs	r4, r7, r2
 8001fc8:	2c00      	cmp	r4, #0
 8001fca:	dc4a      	bgt.n	8002062 <__kernel_rem_pio2f+0x172>
 8001fcc:	4628      	mov	r0, r5
 8001fce:	9305      	str	r3, [sp, #20]
 8001fd0:	f000 fa7e 	bl	80024d0 <scalbnf>
 8001fd4:	eeb0 8a40 	vmov.f32	s16, s0
 8001fd8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8001fdc:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001fe0:	f000 fa34 	bl	800244c <floorf>
 8001fe4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8001fe8:	eea0 8a67 	vfms.f32	s16, s0, s15
 8001fec:	2d00      	cmp	r5, #0
 8001fee:	9b05      	ldr	r3, [sp, #20]
 8001ff0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8001ff4:	ee17 9a90 	vmov	r9, s15
 8001ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002000:	dd44      	ble.n	800208c <__kernel_rem_pio2f+0x19c>
 8002002:	1e78      	subs	r0, r7, #1
 8002004:	aa06      	add	r2, sp, #24
 8002006:	f1c5 0408 	rsb	r4, r5, #8
 800200a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800200e:	fa46 f204 	asr.w	r2, r6, r4
 8002012:	4491      	add	r9, r2
 8002014:	40a2      	lsls	r2, r4
 8002016:	1ab6      	subs	r6, r6, r2
 8002018:	aa06      	add	r2, sp, #24
 800201a:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800201e:	f1c5 0207 	rsb	r2, r5, #7
 8002022:	4116      	asrs	r6, r2
 8002024:	2e00      	cmp	r6, #0
 8002026:	dd40      	ble.n	80020aa <__kernel_rem_pio2f+0x1ba>
 8002028:	2400      	movs	r4, #0
 800202a:	f109 0901 	add.w	r9, r9, #1
 800202e:	4620      	mov	r0, r4
 8002030:	42a7      	cmp	r7, r4
 8002032:	dc75      	bgt.n	8002120 <__kernel_rem_pio2f+0x230>
 8002034:	2d00      	cmp	r5, #0
 8002036:	dd05      	ble.n	8002044 <__kernel_rem_pio2f+0x154>
 8002038:	2d01      	cmp	r5, #1
 800203a:	f000 8086 	beq.w	800214a <__kernel_rem_pio2f+0x25a>
 800203e:	2d02      	cmp	r5, #2
 8002040:	f000 808d 	beq.w	800215e <__kernel_rem_pio2f+0x26e>
 8002044:	2e02      	cmp	r6, #2
 8002046:	d130      	bne.n	80020aa <__kernel_rem_pio2f+0x1ba>
 8002048:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800204c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002050:	b358      	cbz	r0, 80020aa <__kernel_rem_pio2f+0x1ba>
 8002052:	4628      	mov	r0, r5
 8002054:	9305      	str	r3, [sp, #20]
 8002056:	f000 fa3b 	bl	80024d0 <scalbnf>
 800205a:	9b05      	ldr	r3, [sp, #20]
 800205c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002060:	e023      	b.n	80020aa <__kernel_rem_pio2f+0x1ba>
 8002062:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002066:	ac06      	add	r4, sp, #24
 8002068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002070:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002074:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002078:	ee10 1a10 	vmov	r1, s0
 800207c:	ed30 0a01 	vldmdb	r0!, {s0}
 8002080:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8002084:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002088:	3201      	adds	r2, #1
 800208a:	e79c      	b.n	8001fc6 <__kernel_rem_pio2f+0xd6>
 800208c:	d105      	bne.n	800209a <__kernel_rem_pio2f+0x1aa>
 800208e:	1e7a      	subs	r2, r7, #1
 8002090:	a906      	add	r1, sp, #24
 8002092:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8002096:	1236      	asrs	r6, r6, #8
 8002098:	e7c4      	b.n	8002024 <__kernel_rem_pio2f+0x134>
 800209a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800209e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	da39      	bge.n	800211c <__kernel_rem_pio2f+0x22c>
 80020a8:	2600      	movs	r6, #0
 80020aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	f040 808d 	bne.w	80021d0 <__kernel_rem_pio2f+0x2e0>
 80020b6:	1e7c      	subs	r4, r7, #1
 80020b8:	4620      	mov	r0, r4
 80020ba:	2200      	movs	r2, #0
 80020bc:	4550      	cmp	r0, sl
 80020be:	da55      	bge.n	800216c <__kernel_rem_pio2f+0x27c>
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d164      	bne.n	800218e <__kernel_rem_pio2f+0x29e>
 80020c4:	2401      	movs	r4, #1
 80020c6:	f06f 0003 	mvn.w	r0, #3
 80020ca:	fb00 f204 	mul.w	r2, r0, r4
 80020ce:	9904      	ldr	r1, [sp, #16]
 80020d0:	588a      	ldr	r2, [r1, r2]
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d050      	beq.n	8002178 <__kernel_rem_pio2f+0x288>
 80020d6:	aa56      	add	r2, sp, #344	; 0x158
 80020d8:	4490      	add	r8, r2
 80020da:	9a01      	ldr	r2, [sp, #4]
 80020dc:	a91a      	add	r1, sp, #104	; 0x68
 80020de:	443a      	add	r2, r7
 80020e0:	1c78      	adds	r0, r7, #1
 80020e2:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 80020e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80020ea:	4427      	add	r7, r4
 80020ec:	42b8      	cmp	r0, r7
 80020ee:	f73f af5a 	bgt.w	8001fa6 <__kernel_rem_pio2f+0xb6>
 80020f2:	9903      	ldr	r1, [sp, #12]
 80020f4:	9e02      	ldr	r6, [sp, #8]
 80020f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80020fa:	9105      	str	r1, [sp, #20]
 80020fc:	ee07 1a90 	vmov	s15, r1
 8002100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002104:	2400      	movs	r4, #0
 8002106:	ece2 7a01 	vstmia	r2!, {s15}
 800210a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8002240 <__kernel_rem_pio2f+0x350>
 800210e:	4696      	mov	lr, r2
 8002110:	429c      	cmp	r4, r3
 8002112:	dd33      	ble.n	800217c <__kernel_rem_pio2f+0x28c>
 8002114:	ece8 7a01 	vstmia	r8!, {s15}
 8002118:	3001      	adds	r0, #1
 800211a:	e7e7      	b.n	80020ec <__kernel_rem_pio2f+0x1fc>
 800211c:	2602      	movs	r6, #2
 800211e:	e783      	b.n	8002028 <__kernel_rem_pio2f+0x138>
 8002120:	aa06      	add	r2, sp, #24
 8002122:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002126:	b948      	cbnz	r0, 800213c <__kernel_rem_pio2f+0x24c>
 8002128:	b12a      	cbz	r2, 8002136 <__kernel_rem_pio2f+0x246>
 800212a:	a906      	add	r1, sp, #24
 800212c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8002130:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8002134:	2201      	movs	r2, #1
 8002136:	3401      	adds	r4, #1
 8002138:	4610      	mov	r0, r2
 800213a:	e779      	b.n	8002030 <__kernel_rem_pio2f+0x140>
 800213c:	a906      	add	r1, sp, #24
 800213e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8002142:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8002146:	4602      	mov	r2, r0
 8002148:	e7f5      	b.n	8002136 <__kernel_rem_pio2f+0x246>
 800214a:	1e7c      	subs	r4, r7, #1
 800214c:	aa06      	add	r2, sp, #24
 800214e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002152:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002156:	a906      	add	r1, sp, #24
 8002158:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800215c:	e772      	b.n	8002044 <__kernel_rem_pio2f+0x154>
 800215e:	1e7c      	subs	r4, r7, #1
 8002160:	aa06      	add	r2, sp, #24
 8002162:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002166:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800216a:	e7f4      	b.n	8002156 <__kernel_rem_pio2f+0x266>
 800216c:	a906      	add	r1, sp, #24
 800216e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002172:	3801      	subs	r0, #1
 8002174:	430a      	orrs	r2, r1
 8002176:	e7a1      	b.n	80020bc <__kernel_rem_pio2f+0x1cc>
 8002178:	3401      	adds	r4, #1
 800217a:	e7a6      	b.n	80020ca <__kernel_rem_pio2f+0x1da>
 800217c:	ecf6 6a01 	vldmia	r6!, {s13}
 8002180:	ed3e 7a01 	vldmdb	lr!, {s14}
 8002184:	3401      	adds	r4, #1
 8002186:	eee6 7a87 	vfma.f32	s15, s13, s14
 800218a:	e7c1      	b.n	8002110 <__kernel_rem_pio2f+0x220>
 800218c:	3c01      	subs	r4, #1
 800218e:	ab06      	add	r3, sp, #24
 8002190:	3d08      	subs	r5, #8
 8002192:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f8      	beq.n	800218c <__kernel_rem_pio2f+0x29c>
 800219a:	4628      	mov	r0, r5
 800219c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80021a0:	f000 f996 	bl	80024d0 <scalbnf>
 80021a4:	00a3      	lsls	r3, r4, #2
 80021a6:	aa42      	add	r2, sp, #264	; 0x108
 80021a8:	3304      	adds	r3, #4
 80021aa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002234 <__kernel_rem_pio2f+0x344>
 80021ae:	18d0      	adds	r0, r2, r3
 80021b0:	4622      	mov	r2, r4
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	da46      	bge.n	8002244 <__kernel_rem_pio2f+0x354>
 80021b6:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80021ba:	2200      	movs	r2, #0
 80021bc:	1aa5      	subs	r5, r4, r2
 80021be:	d460      	bmi.n	8002282 <__kernel_rem_pio2f+0x392>
 80021c0:	a942      	add	r1, sp, #264	; 0x108
 80021c2:	4f1e      	ldr	r7, [pc, #120]	; (800223c <__kernel_rem_pio2f+0x34c>)
 80021c4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002240 <__kernel_rem_pio2f+0x350>
 80021c8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80021cc:	2000      	movs	r0, #0
 80021ce:	e050      	b.n	8002272 <__kernel_rem_pio2f+0x382>
 80021d0:	4268      	negs	r0, r5
 80021d2:	eeb0 0a48 	vmov.f32	s0, s16
 80021d6:	f000 f97b 	bl	80024d0 <scalbnf>
 80021da:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002238 <__kernel_rem_pio2f+0x348>
 80021de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	db19      	blt.n	800221c <__kernel_rem_pio2f+0x32c>
 80021e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002234 <__kernel_rem_pio2f+0x344>
 80021ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80021f0:	aa06      	add	r2, sp, #24
 80021f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f6:	1c7c      	adds	r4, r7, #1
 80021f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fc:	3508      	adds	r5, #8
 80021fe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8002202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002206:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800220a:	ee10 3a10 	vmov	r3, s0
 800220e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8002212:	ee17 3a90 	vmov	r3, s15
 8002216:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800221a:	e7be      	b.n	800219a <__kernel_rem_pio2f+0x2aa>
 800221c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002220:	aa06      	add	r2, sp, #24
 8002222:	ee10 3a10 	vmov	r3, s0
 8002226:	463c      	mov	r4, r7
 8002228:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800222c:	e7b5      	b.n	800219a <__kernel_rem_pio2f+0x2aa>
 800222e:	bf00      	nop
 8002230:	0800299c 	.word	0x0800299c
 8002234:	3b800000 	.word	0x3b800000
 8002238:	43800000 	.word	0x43800000
 800223c:	08002970 	.word	0x08002970
 8002240:	00000000 	.word	0x00000000
 8002244:	a906      	add	r1, sp, #24
 8002246:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800224a:	9101      	str	r1, [sp, #4]
 800224c:	ee07 1a90 	vmov	s15, r1
 8002250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002254:	3a01      	subs	r2, #1
 8002256:	ee67 7a80 	vmul.f32	s15, s15, s0
 800225a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800225e:	ed60 7a01 	vstmdb	r0!, {s15}
 8002262:	e7a6      	b.n	80021b2 <__kernel_rem_pio2f+0x2c2>
 8002264:	ecf7 6a01 	vldmia	r7!, {s13}
 8002268:	ecb5 7a01 	vldmia	r5!, {s14}
 800226c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002270:	3001      	adds	r0, #1
 8002272:	4550      	cmp	r0, sl
 8002274:	dc01      	bgt.n	800227a <__kernel_rem_pio2f+0x38a>
 8002276:	4290      	cmp	r0, r2
 8002278:	ddf4      	ble.n	8002264 <__kernel_rem_pio2f+0x374>
 800227a:	ecee 7a01 	vstmia	lr!, {s15}
 800227e:	3201      	adds	r2, #1
 8002280:	e79c      	b.n	80021bc <__kernel_rem_pio2f+0x2cc>
 8002282:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8002284:	2a03      	cmp	r2, #3
 8002286:	d843      	bhi.n	8002310 <__kernel_rem_pio2f+0x420>
 8002288:	e8df f002 	tbb	[pc, r2]
 800228c:	021d1d37 	.word	0x021d1d37
 8002290:	aa2e      	add	r2, sp, #184	; 0xb8
 8002292:	4413      	add	r3, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4620      	mov	r0, r4
 8002298:	2800      	cmp	r0, #0
 800229a:	dc55      	bgt.n	8002348 <__kernel_rem_pio2f+0x458>
 800229c:	461a      	mov	r2, r3
 800229e:	4620      	mov	r0, r4
 80022a0:	2801      	cmp	r0, #1
 80022a2:	dc61      	bgt.n	8002368 <__kernel_rem_pio2f+0x478>
 80022a4:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8002240 <__kernel_rem_pio2f+0x350>
 80022a8:	2c01      	cmp	r4, #1
 80022aa:	dc6d      	bgt.n	8002388 <__kernel_rem_pio2f+0x498>
 80022ac:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80022b0:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80022b4:	2e00      	cmp	r6, #0
 80022b6:	d16d      	bne.n	8002394 <__kernel_rem_pio2f+0x4a4>
 80022b8:	edcb 6a00 	vstr	s13, [fp]
 80022bc:	ed8b 7a01 	vstr	s14, [fp, #4]
 80022c0:	edcb 7a02 	vstr	s15, [fp, #8]
 80022c4:	e024      	b.n	8002310 <__kernel_rem_pio2f+0x420>
 80022c6:	aa2e      	add	r2, sp, #184	; 0xb8
 80022c8:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002240 <__kernel_rem_pio2f+0x350>
 80022cc:	4413      	add	r3, r2
 80022ce:	4622      	mov	r2, r4
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	da2a      	bge.n	800232a <__kernel_rem_pio2f+0x43a>
 80022d4:	b37e      	cbz	r6, 8002336 <__kernel_rem_pio2f+0x446>
 80022d6:	eef1 7a47 	vneg.f32	s15, s14
 80022da:	edcb 7a00 	vstr	s15, [fp]
 80022de:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80022e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022e6:	aa2f      	add	r2, sp, #188	; 0xbc
 80022e8:	2301      	movs	r3, #1
 80022ea:	429c      	cmp	r4, r3
 80022ec:	da26      	bge.n	800233c <__kernel_rem_pio2f+0x44c>
 80022ee:	b10e      	cbz	r6, 80022f4 <__kernel_rem_pio2f+0x404>
 80022f0:	eef1 7a67 	vneg.f32	s15, s15
 80022f4:	edcb 7a01 	vstr	s15, [fp, #4]
 80022f8:	e00a      	b.n	8002310 <__kernel_rem_pio2f+0x420>
 80022fa:	aa2e      	add	r2, sp, #184	; 0xb8
 80022fc:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8002240 <__kernel_rem_pio2f+0x350>
 8002300:	4413      	add	r3, r2
 8002302:	2c00      	cmp	r4, #0
 8002304:	da0b      	bge.n	800231e <__kernel_rem_pio2f+0x42e>
 8002306:	b10e      	cbz	r6, 800230c <__kernel_rem_pio2f+0x41c>
 8002308:	eef1 7a67 	vneg.f32	s15, s15
 800230c:	edcb 7a00 	vstr	s15, [fp]
 8002310:	f009 0007 	and.w	r0, r9, #7
 8002314:	b057      	add	sp, #348	; 0x15c
 8002316:	ecbd 8b04 	vpop	{d8-d9}
 800231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231e:	ed33 7a01 	vldmdb	r3!, {s14}
 8002322:	3c01      	subs	r4, #1
 8002324:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002328:	e7eb      	b.n	8002302 <__kernel_rem_pio2f+0x412>
 800232a:	ed73 7a01 	vldmdb	r3!, {s15}
 800232e:	3a01      	subs	r2, #1
 8002330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002334:	e7cc      	b.n	80022d0 <__kernel_rem_pio2f+0x3e0>
 8002336:	eef0 7a47 	vmov.f32	s15, s14
 800233a:	e7ce      	b.n	80022da <__kernel_rem_pio2f+0x3ea>
 800233c:	ecb2 7a01 	vldmia	r2!, {s14}
 8002340:	3301      	adds	r3, #1
 8002342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002346:	e7d0      	b.n	80022ea <__kernel_rem_pio2f+0x3fa>
 8002348:	ed52 6a01 	vldr	s13, [r2, #-4]
 800234c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8002350:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002354:	3801      	subs	r0, #1
 8002356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800235a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800235e:	ed62 7a01 	vstmdb	r2!, {s15}
 8002362:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002366:	e797      	b.n	8002298 <__kernel_rem_pio2f+0x3a8>
 8002368:	ed52 6a01 	vldr	s13, [r2, #-4]
 800236c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8002370:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002374:	3801      	subs	r0, #1
 8002376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237e:	ed62 7a01 	vstmdb	r2!, {s15}
 8002382:	ed02 7a01 	vstr	s14, [r2, #-4]
 8002386:	e78b      	b.n	80022a0 <__kernel_rem_pio2f+0x3b0>
 8002388:	ed33 7a01 	vldmdb	r3!, {s14}
 800238c:	3c01      	subs	r4, #1
 800238e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002392:	e789      	b.n	80022a8 <__kernel_rem_pio2f+0x3b8>
 8002394:	eef1 6a66 	vneg.f32	s13, s13
 8002398:	eeb1 7a47 	vneg.f32	s14, s14
 800239c:	edcb 6a00 	vstr	s13, [fp]
 80023a0:	ed8b 7a01 	vstr	s14, [fp, #4]
 80023a4:	eef1 7a67 	vneg.f32	s15, s15
 80023a8:	e78a      	b.n	80022c0 <__kernel_rem_pio2f+0x3d0>
 80023aa:	bf00      	nop

080023ac <__kernel_sinf>:
 80023ac:	ee10 3a10 	vmov	r3, s0
 80023b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80023b8:	da04      	bge.n	80023c4 <__kernel_sinf+0x18>
 80023ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80023be:	ee17 3a90 	vmov	r3, s15
 80023c2:	b35b      	cbz	r3, 800241c <__kernel_sinf+0x70>
 80023c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80023c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002420 <__kernel_sinf+0x74>
 80023cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002424 <__kernel_sinf+0x78>
 80023d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80023d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002428 <__kernel_sinf+0x7c>
 80023d8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80023dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800242c <__kernel_sinf+0x80>
 80023e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80023e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002430 <__kernel_sinf+0x84>
 80023e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80023ec:	eee7 7a06 	vfma.f32	s15, s14, s12
 80023f0:	b930      	cbnz	r0, 8002400 <__kernel_sinf+0x54>
 80023f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002434 <__kernel_sinf+0x88>
 80023f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80023fa:	eea6 0a86 	vfma.f32	s0, s13, s12
 80023fe:	4770      	bx	lr
 8002400:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002404:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002408:	eee0 7a86 	vfma.f32	s15, s1, s12
 800240c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8002410:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002438 <__kernel_sinf+0x8c>
 8002414:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8002418:	ee30 0a60 	vsub.f32	s0, s0, s1
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	2f2ec9d3 	.word	0x2f2ec9d3
 8002424:	b2d72f34 	.word	0xb2d72f34
 8002428:	3638ef1b 	.word	0x3638ef1b
 800242c:	b9500d01 	.word	0xb9500d01
 8002430:	3c088889 	.word	0x3c088889
 8002434:	be2aaaab 	.word	0xbe2aaaab
 8002438:	3e2aaaab 	.word	0x3e2aaaab

0800243c <fabsf>:
 800243c:	ee10 3a10 	vmov	r3, s0
 8002440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002444:	ee00 3a10 	vmov	s0, r3
 8002448:	4770      	bx	lr
	...

0800244c <floorf>:
 800244c:	ee10 3a10 	vmov	r3, s0
 8002450:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002454:	0dca      	lsrs	r2, r1, #23
 8002456:	3a7f      	subs	r2, #127	; 0x7f
 8002458:	2a16      	cmp	r2, #22
 800245a:	dc2a      	bgt.n	80024b2 <floorf+0x66>
 800245c:	2a00      	cmp	r2, #0
 800245e:	da11      	bge.n	8002484 <floorf+0x38>
 8002460:	eddf 7a18 	vldr	s15, [pc, #96]	; 80024c4 <floorf+0x78>
 8002464:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002468:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	dd05      	ble.n	800247e <floorf+0x32>
 8002472:	2b00      	cmp	r3, #0
 8002474:	da23      	bge.n	80024be <floorf+0x72>
 8002476:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <floorf+0x7c>)
 8002478:	2900      	cmp	r1, #0
 800247a:	bf18      	it	ne
 800247c:	4613      	movne	r3, r2
 800247e:	ee00 3a10 	vmov	s0, r3
 8002482:	4770      	bx	lr
 8002484:	4911      	ldr	r1, [pc, #68]	; (80024cc <floorf+0x80>)
 8002486:	4111      	asrs	r1, r2
 8002488:	420b      	tst	r3, r1
 800248a:	d0fa      	beq.n	8002482 <floorf+0x36>
 800248c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80024c4 <floorf+0x78>
 8002490:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002494:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	ddef      	ble.n	800247e <floorf+0x32>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bfbe      	ittt	lt
 80024a2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80024a6:	fa40 f202 	asrlt.w	r2, r0, r2
 80024aa:	189b      	addlt	r3, r3, r2
 80024ac:	ea23 0301 	bic.w	r3, r3, r1
 80024b0:	e7e5      	b.n	800247e <floorf+0x32>
 80024b2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80024b6:	d3e4      	bcc.n	8002482 <floorf+0x36>
 80024b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80024bc:	4770      	bx	lr
 80024be:	2300      	movs	r3, #0
 80024c0:	e7dd      	b.n	800247e <floorf+0x32>
 80024c2:	bf00      	nop
 80024c4:	7149f2ca 	.word	0x7149f2ca
 80024c8:	bf800000 	.word	0xbf800000
 80024cc:	007fffff 	.word	0x007fffff

080024d0 <scalbnf>:
 80024d0:	b508      	push	{r3, lr}
 80024d2:	ee10 2a10 	vmov	r2, s0
 80024d6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80024da:	ed2d 8b02 	vpush	{d8}
 80024de:	eef0 0a40 	vmov.f32	s1, s0
 80024e2:	d004      	beq.n	80024ee <scalbnf+0x1e>
 80024e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80024e8:	d306      	bcc.n	80024f8 <scalbnf+0x28>
 80024ea:	ee70 0a00 	vadd.f32	s1, s0, s0
 80024ee:	ecbd 8b02 	vpop	{d8}
 80024f2:	eeb0 0a60 	vmov.f32	s0, s1
 80024f6:	bd08      	pop	{r3, pc}
 80024f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024fc:	d21c      	bcs.n	8002538 <scalbnf+0x68>
 80024fe:	4b1f      	ldr	r3, [pc, #124]	; (800257c <scalbnf+0xac>)
 8002500:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002580 <scalbnf+0xb0>
 8002504:	4298      	cmp	r0, r3
 8002506:	ee60 0a27 	vmul.f32	s1, s0, s15
 800250a:	db10      	blt.n	800252e <scalbnf+0x5e>
 800250c:	ee10 2a90 	vmov	r2, s1
 8002510:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8002514:	3b19      	subs	r3, #25
 8002516:	4403      	add	r3, r0
 8002518:	2bfe      	cmp	r3, #254	; 0xfe
 800251a:	dd0f      	ble.n	800253c <scalbnf+0x6c>
 800251c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8002584 <scalbnf+0xb4>
 8002520:	eeb0 0a48 	vmov.f32	s0, s16
 8002524:	f000 f834 	bl	8002590 <copysignf>
 8002528:	ee60 0a08 	vmul.f32	s1, s0, s16
 800252c:	e7df      	b.n	80024ee <scalbnf+0x1e>
 800252e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002588 <scalbnf+0xb8>
 8002532:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002536:	e7da      	b.n	80024ee <scalbnf+0x1e>
 8002538:	0ddb      	lsrs	r3, r3, #23
 800253a:	e7ec      	b.n	8002516 <scalbnf+0x46>
 800253c:	2b00      	cmp	r3, #0
 800253e:	dd06      	ble.n	800254e <scalbnf+0x7e>
 8002540:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002544:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8002548:	ee00 3a90 	vmov	s1, r3
 800254c:	e7cf      	b.n	80024ee <scalbnf+0x1e>
 800254e:	f113 0f16 	cmn.w	r3, #22
 8002552:	da06      	bge.n	8002562 <scalbnf+0x92>
 8002554:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002558:	4298      	cmp	r0, r3
 800255a:	dcdf      	bgt.n	800251c <scalbnf+0x4c>
 800255c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002588 <scalbnf+0xb8>
 8002560:	e7de      	b.n	8002520 <scalbnf+0x50>
 8002562:	3319      	adds	r3, #25
 8002564:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002568:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800256c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800258c <scalbnf+0xbc>
 8002570:	ee07 3a10 	vmov	s14, r3
 8002574:	ee67 0a27 	vmul.f32	s1, s14, s15
 8002578:	e7b9      	b.n	80024ee <scalbnf+0x1e>
 800257a:	bf00      	nop
 800257c:	ffff3cb0 	.word	0xffff3cb0
 8002580:	4c000000 	.word	0x4c000000
 8002584:	7149f2ca 	.word	0x7149f2ca
 8002588:	0da24260 	.word	0x0da24260
 800258c:	33000000 	.word	0x33000000

08002590 <copysignf>:
 8002590:	ee10 3a10 	vmov	r3, s0
 8002594:	ee10 2a90 	vmov	r2, s1
 8002598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800259c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025a0:	4313      	orrs	r3, r2
 80025a2:	ee00 3a10 	vmov	s0, r3
 80025a6:	4770      	bx	lr

080025a8 <_init>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr

080025b4 <_fini>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	bf00      	nop
 80025b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ba:	bc08      	pop	{r3}
 80025bc:	469e      	mov	lr, r3
 80025be:	4770      	bx	lr
