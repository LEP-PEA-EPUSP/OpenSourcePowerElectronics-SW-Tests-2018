
Aula03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000efc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001084  08001084  00011084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001094  08001094  00011094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001098  08001098  00011098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800109c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000006c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000070  20000070  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00002868  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000a06a  00000000  00000000  0002289c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000183e  00000000  00000000  0002c906  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003a8  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000578  00000000  00000000  0002e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f0c  00000000  00000000  0002ea68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030974  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000860  00000000  00000000  000309f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00001690  00000000  00000000  00031250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800106c 	.word	0x0800106c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800106c 	.word	0x0800106c

080001c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
  ldr  r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001f2:	f000 f8e1 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f000 ff15 	bl	8001024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80001fa:	f000 f85f 	bl	80002bc <main>
  bx  lr    
 80001fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000204:	0800109c 	.word	0x0800109c
  ldr  r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800020c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000210:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000214:	20000070 	.word	0x20000070

08000218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 8000220:	2400      	movs	r4, #0
 8000222:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <SystemClock_Config+0x98>)
 8000224:	9401      	str	r4, [sp, #4]
 8000226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000228:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800022c:	641a      	str	r2, [r3, #64]	; 0x40
 800022e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <SystemClock_Config+0x9c>)
 800023a:	9402      	str	r4, [sp, #8]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	681b      	ldr	r3, [r3, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000246:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800024c:	9302      	str	r3, [sp, #8]
 800024e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000254:	2310      	movs	r3, #16
 8000256:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000258:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 800025c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800025e:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000260:	23a8      	movs	r3, #168	; 0xa8
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000262:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000264:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800026a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800026c:	9613      	str	r6, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800026e:	f000 fc77 	bl	8000b60 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000276:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800027a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800027c:	9306      	str	r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800027e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000284:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800028a:	f000 fdd5 	bl	8000e38 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800028e:	f000 feaf 	bl	8000ff0 <HAL_RCC_GetHCLKFreq>
 8000292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000296:	fbb0 f0f3 	udiv	r0, r0, r3
 800029a:	f000 fb53 	bl	8000944 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800029e:	4630      	mov	r0, r6
 80002a0:	f000 fb66 	bl	8000970 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002a4:	4622      	mov	r2, r4
 80002a6:	4621      	mov	r1, r4
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ac:	f000 fb16 	bl	80008dc <HAL_NVIC_SetPriority>
}
 80002b0:	b014      	add	sp, #80	; 0x50
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40007000 	.word	0x40007000

080002bc <main>:
{
 80002bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 80002be:	f000 f8b3 	bl	8000428 <HAL_Init>
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 80002c2:	2500      	movs	r5, #0
  SystemClock_Config();
 80002c4:	f7ff ffaa 	bl	800021c <SystemClock_Config>
  __GPIOA_CLK_ENABLE();
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <main+0x80>)
 80002ca:	9501      	str	r5, [sp, #4]
 80002cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 80002ce:	4c1c      	ldr	r4, [pc, #112]	; (8000340 <main+0x84>)
  hadc1.Init.Resolution = ADC_RESOLUTION8b;
 80002d0:	491c      	ldr	r1, [pc, #112]	; (8000344 <main+0x88>)
  __GPIOA_CLK_ENABLE();
 80002d2:	f042 0201 	orr.w	r2, r2, #1
 80002d6:	631a      	str	r2, [r3, #48]	; 0x30
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hadc1.Init.ScanConvMode = DISABLE;
 80002da:	6125      	str	r5, [r4, #16]
  __GPIOA_CLK_ENABLE();
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	9301      	str	r3, [sp, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION8b;
 80002e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc1.Init.NbrOfConversion = 1;
 80002e6:	2601      	movs	r6, #1
  __GPIOA_CLK_ENABLE();
 80002e8:	9b01      	ldr	r3, [sp, #4]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ea:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION8b;
 80002ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  HAL_ADC_Init(&hadc1);
 80002f0:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION8b;
 80002f2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f6:	6225      	str	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002f8:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fa:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002fc:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.NbrOfConversion = 1;
 80002fe:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = EOC_SINGLE_CONV;
 8000300:	6166      	str	r6, [r4, #20]
  HAL_ADC_Init(&hadc1);
 8000302:	f000 f8c7 	bl	8000494 <HAL_ADC_Init>
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000306:	a902      	add	r1, sp, #8
 8000308:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800030a:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800030c:	9504      	str	r5, [sp, #16]
  sConfig.Rank = 1;
 800030e:	9603      	str	r6, [sp, #12]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000310:	f000 fa3c 	bl	800078c <HAL_ADC_ConfigChannel>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 8000314:	4d0c      	ldr	r5, [pc, #48]	; (8000348 <main+0x8c>)
	  HAL_ADC_Start(&hadc1);
 8000316:	4620      	mov	r0, r4
 8000318:	f000 f966 	bl	80005e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 800031c:	2114      	movs	r1, #20
 800031e:	4620      	mov	r0, r4
 8000320:	f000 f9e0 	bl	80006e4 <HAL_ADC_PollForConversion>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 8000324:	4620      	mov	r0, r4
 8000326:	f000 fa2d 	bl	8000784 <HAL_ADC_GetValue>
 800032a:	6028      	str	r0, [r5, #0]
	  HAL_ADC_Stop(&hadc1);
 800032c:	4620      	mov	r0, r4
 800032e:	f000 f9bb 	bl	80006a8 <HAL_ADC_Stop>
	  HAL_Delay(1000);
 8000332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000336:	f000 f89f 	bl	8000478 <HAL_Delay>
 800033a:	e7ec      	b.n	8000316 <main+0x5a>
 800033c:	40023800 	.word	0x40023800
 8000340:	20000024 	.word	0x20000024
 8000344:	40012000 	.word	0x40012000
 8000348:	20000020 	.word	0x20000020

0800034c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800034c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800034e:	2003      	movs	r0, #3
 8000350:	f000 fab2 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	4611      	mov	r1, r2
 8000358:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000360:	f000 babc 	b.w	80008dc <HAL_NVIC_SetPriority>

08000364 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000364:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8000366:	6802      	ldr	r2, [r0, #0]
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <HAL_ADC_MspInit+0x3c>)
 800036a:	429a      	cmp	r2, r3
 800036c:	d115      	bne.n	800039a <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __ADC1_CLK_ENABLE();
 800036e:	2100      	movs	r1, #0
 8000370:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000374:	9100      	str	r1, [sp, #0]
 8000376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000378:	480a      	ldr	r0, [pc, #40]	; (80003a4 <HAL_ADC_MspInit+0x40>)
    __ADC1_CLK_ENABLE();
 800037a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800037e:	645a      	str	r2, [r3, #68]	; 0x44
 8000380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	9103      	str	r1, [sp, #12]
    __ADC1_CLK_ENABLE();
 8000384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800038c:	2301      	movs	r3, #1
 800038e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000392:	2303      	movs	r3, #3
 8000394:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	f000 fafd 	bl	8000994 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800039a:	b007      	add	sp, #28
 800039c:	f85d fb04 	ldr.w	pc, [sp], #4
 80003a0:	40012000 	.word	0x40012000
 80003a4:	40020000 	.word	0x40020000

080003a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80003a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003aa:	f000 f857 	bl	800045c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80003b2:	f000 baea 	b.w	800098a <HAL_SYSTICK_IRQHandler>
	...

080003b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b8:	490f      	ldr	r1, [pc, #60]	; (80003f8 <SystemInit+0x40>)
 80003ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80003be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <SystemInit+0x44>)
 80003c8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ca:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80003cc:	f042 0201 	orr.w	r2, r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80003d2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003de:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <SystemInit+0x48>)
 80003e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80003ea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003ec:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003f2:	608b      	str	r3, [r1, #8]
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	40023800 	.word	0x40023800
 8000400:	24003010 	.word	0x24003010

08000404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000404:	b510      	push	{r4, lr}
 8000406:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000408:	f000 fdf2 	bl	8000ff0 <HAL_RCC_GetHCLKFreq>
 800040c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000410:	fbb0 f0f3 	udiv	r0, r0, r3
 8000414:	f000 fa96 	bl	8000944 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000418:	2200      	movs	r2, #0
 800041a:	4621      	mov	r1, r4
 800041c:	f04f 30ff 	mov.w	r0, #4294967295
 8000420:	f000 fa5c 	bl	80008dc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000424:	2000      	movs	r0, #0
 8000426:	bd10      	pop	{r4, pc}

08000428 <HAL_Init>:
{
 8000428:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <HAL_Init+0x30>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000432:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800043a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000442:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000444:	2003      	movs	r0, #3
 8000446:	f000 fa37 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff ffda 	bl	8000404 <HAL_InitTick>
  HAL_MspInit();
 8000450:	f7ff ff7c 	bl	800034c <HAL_MspInit>
}
 8000454:	2000      	movs	r0, #0
 8000456:	bd08      	pop	{r3, pc}
 8000458:	40023c00 	.word	0x40023c00

0800045c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800045c:	4a02      	ldr	r2, [pc, #8]	; (8000468 <HAL_IncTick+0xc>)
 800045e:	6813      	ldr	r3, [r2, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	6013      	str	r3, [r2, #0]
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	2000006c 	.word	0x2000006c

0800046c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800046c:	4b01      	ldr	r3, [pc, #4]	; (8000474 <HAL_GetTick+0x8>)
 800046e:	6818      	ldr	r0, [r3, #0]
}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	2000006c 	.word	0x2000006c

08000478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000478:	b513      	push	{r0, r1, r4, lr}
 800047a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 800047c:	f7ff fff6 	bl	800046c <HAL_GetTick>
 8000480:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000482:	f7ff fff3 	bl	800046c <HAL_GetTick>
 8000486:	9b01      	ldr	r3, [sp, #4]
 8000488:	1b00      	subs	r0, r0, r4
 800048a:	4298      	cmp	r0, r3
 800048c:	d3f9      	bcc.n	8000482 <HAL_Delay+0xa>
  {
  }
}
 800048e:	b002      	add	sp, #8
 8000490:	bd10      	pop	{r4, pc}
	...

08000494 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000494:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000496:	4604      	mov	r4, r0
 8000498:	2800      	cmp	r0, #0
 800049a:	f000 809f 	beq.w	80005dc <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800049e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80004a0:	b923      	cbnz	r3, 80004ac <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80004a2:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80004a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80004a8:	f7ff ff5c 	bl	8000364 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80004ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004ae:	06db      	lsls	r3, r3, #27
 80004b0:	f100 8092 	bmi.w	80005d8 <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80004b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80004ba:	f023 0302 	bic.w	r3, r3, #2
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80004c4:	4b46      	ldr	r3, [pc, #280]	; (80005e0 <HAL_ADC_Init+0x14c>)
 80004c6:	685a      	ldr	r2, [r3, #4]
 80004c8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80004cc:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80004ce:	685a      	ldr	r2, [r3, #4]
 80004d0:	6861      	ldr	r1, [r4, #4]
 80004d2:	430a      	orrs	r2, r1
 80004d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80004d6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80004d8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80004da:	685a      	ldr	r2, [r3, #4]
 80004dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80004e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80004e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80004ea:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80004ec:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80004ee:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80004f2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80004fa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80004fc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80004fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000504:	689a      	ldr	r2, [r3, #8]
 8000506:	430a      	orrs	r2, r1
 8000508:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800050a:	4936      	ldr	r1, [pc, #216]	; (80005e4 <HAL_ADC_Init+0x150>)
 800050c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800050e:	428a      	cmp	r2, r1
 8000510:	d056      	beq.n	80005c0 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000512:	6899      	ldr	r1, [r3, #8]
 8000514:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000518:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800051a:	6899      	ldr	r1, [r3, #8]
 800051c:	430a      	orrs	r2, r1
 800051e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000520:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000522:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800052a:	689a      	ldr	r2, [r3, #8]
 800052c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800052e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000530:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000532:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000534:	f022 0202 	bic.w	r2, r2, #2
 8000538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000540:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000542:	6a22      	ldr	r2, [r4, #32]
 8000544:	2a00      	cmp	r2, #0
 8000546:	d043      	beq.n	80005d0 <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800054e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000550:	685a      	ldr	r2, [r3, #4]
 8000552:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000556:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000558:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800055c:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000560:	fab2 f182 	clz	r1, r2
 8000564:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000566:	6858      	ldr	r0, [r3, #4]
 8000568:	3a01      	subs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800056e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000572:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000574:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000578:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800057a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800057c:	3901      	subs	r1, #1
 800057e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000584:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000586:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800058c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800058e:	689a      	ldr	r2, [r3, #8]
 8000590:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000594:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000596:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000598:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800059a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800059e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80005a0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80005a2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80005a4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80005a8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80005aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80005ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ae:	f023 0303 	bic.w	r3, r3, #3
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80005b8:	2300      	movs	r3, #0
 80005ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80005be:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80005c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80005ce:	e7ae      	b.n	800052e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005d6:	e7ca      	b.n	800056e <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
 80005da:	e7ed      	b.n	80005b8 <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 80005dc:	2001      	movs	r0, #1
}
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	40012300 	.word	0x40012300
 80005e4:	0f000001 	.word	0x0f000001

080005e8 <HAL_ADC_Start>:
{
 80005e8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80005ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d04e      	beq.n	8000694 <HAL_ADC_Start+0xac>
 80005f6:	2301      	movs	r3, #1
 80005f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80005fc:	6803      	ldr	r3, [r0, #0]
 80005fe:	689a      	ldr	r2, [r3, #8]
 8000600:	07d1      	lsls	r1, r2, #31
 8000602:	d505      	bpl.n	8000610 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	07d2      	lsls	r2, r2, #31
 8000608:	d414      	bmi.n	8000634 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800060a:	2000      	movs	r0, #0
}
 800060c:	b002      	add	sp, #8
 800060e:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000610:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000612:	4921      	ldr	r1, [pc, #132]	; (8000698 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000614:	f042 0201 	orr.w	r2, r2, #1
 8000618:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800061a:	4a20      	ldr	r2, [pc, #128]	; (800069c <HAL_ADC_Start+0xb4>)
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000622:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000626:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	2a00      	cmp	r2, #0
 800062c:	d0ea      	beq.n	8000604 <HAL_ADC_Start+0x1c>
      counter--;
 800062e:	9a01      	ldr	r2, [sp, #4]
 8000630:	3a01      	subs	r2, #1
 8000632:	e7f8      	b.n	8000626 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000634:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800063a:	f022 0201 	bic.w	r2, r2, #1
 800063e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000642:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000648:	bf41      	itttt	mi
 800064a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 800064c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000650:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000654:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000656:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800065c:	bf1c      	itt	ne
 800065e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000660:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000664:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000666:	2200      	movs	r2, #0
 8000668:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800066c:	f06f 0202 	mvn.w	r2, #2
 8000670:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <HAL_ADC_Start+0xb8>)
 8000674:	6852      	ldr	r2, [r2, #4]
 8000676:	06d2      	lsls	r2, r2, #27
 8000678:	d108      	bne.n	800068c <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800067a:	6898      	ldr	r0, [r3, #8]
 800067c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000680:	d1c3      	bne.n	800060a <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	e7bf      	b.n	800060c <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <HAL_ADC_Start+0xbc>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d1bb      	bne.n	800060a <HAL_ADC_Start+0x22>
 8000692:	e7f2      	b.n	800067a <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000694:	2002      	movs	r0, #2
 8000696:	e7b9      	b.n	800060c <HAL_ADC_Start+0x24>
 8000698:	000f4240 	.word	0x000f4240
 800069c:	20000000 	.word	0x20000000
 80006a0:	40012300 	.word	0x40012300
 80006a4:	40012000 	.word	0x40012000

080006a8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80006a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d017      	beq.n	80006e0 <HAL_ADC_Stop+0x38>
 80006b0:	2301      	movs	r3, #1
 80006b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80006b6:	6803      	ldr	r3, [r0, #0]
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	f022 0201 	bic.w	r2, r2, #1
 80006be:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	07db      	lsls	r3, r3, #31
 80006c4:	d407      	bmi.n	80006d6 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 80006c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006d6:	2300      	movs	r3, #0
 80006d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80006dc:	4618      	mov	r0, r3
 80006de:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80006e0:	2002      	movs	r0, #2
}
 80006e2:	4770      	bx	lr

080006e4 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80006e4:	6803      	ldr	r3, [r0, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
{
 80006e8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80006ea:	0556      	lsls	r6, r2, #21
{
 80006ec:	4604      	mov	r4, r0
 80006ee:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80006f0:	d50b      	bpl.n	800070a <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80006f2:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80006f4:	05d8      	lsls	r0, r3, #23
 80006f6:	d508      	bpl.n	800070a <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8000700:	2300      	movs	r3, #0
 8000702:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000706:	2001      	movs	r0, #1
 8000708:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 800070a:	f7ff feaf 	bl	800046c <HAL_GetTick>
 800070e:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000710:	6823      	ldr	r3, [r4, #0]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	0792      	lsls	r2, r2, #30
 8000716:	d50c      	bpl.n	8000732 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000718:	f06f 0212 	mvn.w	r2, #18
 800071c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800071e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000724:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800072c:	d013      	beq.n	8000756 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800072e:	2000      	movs	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000732:	1c69      	adds	r1, r5, #1
 8000734:	d0ed      	beq.n	8000712 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000736:	b945      	cbnz	r5, 800074a <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000740:	2300      	movs	r3, #0
 8000742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000746:	2003      	movs	r0, #3
 8000748:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800074a:	f7ff fe8f 	bl	800046c <HAL_GetTick>
 800074e:	1b80      	subs	r0, r0, r6
 8000750:	4285      	cmp	r5, r0
 8000752:	d2dd      	bcs.n	8000710 <HAL_ADC_PollForConversion+0x2c>
 8000754:	e7f0      	b.n	8000738 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000756:	69a2      	ldr	r2, [r4, #24]
 8000758:	2a00      	cmp	r2, #0
 800075a:	d1e8      	bne.n	800072e <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800075c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800075e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000762:	d002      	beq.n	800076a <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000764:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000766:	055b      	lsls	r3, r3, #21
 8000768:	d4e1      	bmi.n	800072e <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800076a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800076c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000770:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000772:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000774:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000778:	d1d9      	bne.n	800072e <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800077a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000782:	bd70      	pop	{r4, r5, r6, pc}

08000784 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000784:	6803      	ldr	r3, [r0, #0]
 8000786:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000788:	4770      	bx	lr
	...

0800078c <HAL_ADC_ConfigChannel>:
{
 800078c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800078e:	2300      	movs	r3, #0
 8000790:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000792:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000796:	2b01      	cmp	r3, #1
 8000798:	f000 8083 	beq.w	80008a2 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800079c:	680d      	ldr	r5, [r1, #0]
 800079e:	6804      	ldr	r4, [r0, #0]
 80007a0:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80007a2:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007a4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80007a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80007aa:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80007ac:	d92a      	bls.n	8000804 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80007ae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80007b2:	68e7      	ldr	r7, [r4, #12]
 80007b4:	3b1e      	subs	r3, #30
 80007b6:	f04f 0e07 	mov.w	lr, #7
 80007ba:	fa0e fe03 	lsl.w	lr, lr, r3
 80007be:	ea27 070e 	bic.w	r7, r7, lr
 80007c2:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80007c4:	68e7      	ldr	r7, [r4, #12]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	433b      	orrs	r3, r7
 80007cc:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80007ce:	684a      	ldr	r2, [r1, #4]
 80007d0:	2a06      	cmp	r2, #6
 80007d2:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80007d6:	d825      	bhi.n	8000824 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007d8:	4413      	add	r3, r2
 80007da:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80007dc:	1f59      	subs	r1, r3, #5
 80007de:	231f      	movs	r3, #31
 80007e0:	408b      	lsls	r3, r1
 80007e2:	ea27 0303 	bic.w	r3, r7, r3
 80007e6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007ea:	fa06 f101 	lsl.w	r1, r6, r1
 80007ee:	4311      	orrs	r1, r2
 80007f0:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_ADC_ConfigChannel+0x11c>)
 80007f4:	429c      	cmp	r4, r3
 80007f6:	d034      	beq.n	8000862 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80007f8:	2300      	movs	r3, #0
 80007fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007fe:	4618      	mov	r0, r3
}
 8000800:	b003      	add	sp, #12
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000804:	6927      	ldr	r7, [r4, #16]
 8000806:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800080a:	f04f 0e07 	mov.w	lr, #7
 800080e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000812:	ea27 070e 	bic.w	r7, r7, lr
 8000816:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000818:	6927      	ldr	r7, [r4, #16]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	433b      	orrs	r3, r7
 8000820:	6123      	str	r3, [r4, #16]
 8000822:	e7d4      	b.n	80007ce <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000824:	2a0c      	cmp	r2, #12
 8000826:	d80e      	bhi.n	8000846 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000828:	4413      	add	r3, r2
 800082a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800082c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000830:	231f      	movs	r3, #31
 8000832:	4093      	lsls	r3, r2
 8000834:	ea21 0303 	bic.w	r3, r1, r3
 8000838:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800083a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800083c:	fa06 f202 	lsl.w	r2, r6, r2
 8000840:	431a      	orrs	r2, r3
 8000842:	6322      	str	r2, [r4, #48]	; 0x30
 8000844:	e7d5      	b.n	80007f2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000846:	4413      	add	r3, r2
 8000848:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800084a:	3b41      	subs	r3, #65	; 0x41
 800084c:	221f      	movs	r2, #31
 800084e:	409a      	lsls	r2, r3
 8000850:	ea21 0202 	bic.w	r2, r1, r2
 8000854:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000856:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000858:	fa06 f103 	lsl.w	r1, r6, r3
 800085c:	4311      	orrs	r1, r2
 800085e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000860:	e7c7      	b.n	80007f2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000862:	2d12      	cmp	r5, #18
 8000864:	d104      	bne.n	8000870 <HAL_ADC_ConfigChannel+0xe4>
    ADC->CCR |= ADC_CCR_VBATE;
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_ADC_ConfigChannel+0x120>)
 8000868:	6853      	ldr	r3, [r2, #4]
 800086a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800086e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000870:	f1a5 0310 	sub.w	r3, r5, #16
 8000874:	2b01      	cmp	r3, #1
 8000876:	d8bf      	bhi.n	80007f8 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <HAL_ADC_ConfigChannel+0x120>)
 800087a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800087c:	2d10      	cmp	r5, #16
    ADC->CCR |= ADC_CCR_TSVREFE;
 800087e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000882:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000884:	d1b8      	bne.n	80007f8 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_ADC_ConfigChannel+0x124>)
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_ADC_ConfigChannel+0x128>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000890:	230a      	movs	r3, #10
 8000892:	4353      	muls	r3, r2
        counter--;
 8000894:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000896:	9b01      	ldr	r3, [sp, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0ad      	beq.n	80007f8 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800089c:	9b01      	ldr	r3, [sp, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	e7f8      	b.n	8000894 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80008a2:	2002      	movs	r0, #2
 80008a4:	e7ac      	b.n	8000800 <HAL_ADC_ConfigChannel+0x74>
 80008a6:	bf00      	nop
 80008a8:	40012000 	.word	0x40012000
 80008ac:	40012300 	.word	0x40012300
 80008b0:	20000000 	.word	0x20000000
 80008b4:	000f4240 	.word	0x000f4240

080008b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008c0:	041b      	lsls	r3, r3, #16
 80008c2:	0c1b      	lsrs	r3, r3, #16
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008c8:	0200      	lsls	r0, r0, #8
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80008d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008d4:	60d3      	str	r3, [r2, #12]
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008de:	b530      	push	{r4, r5, lr}
 80008e0:	68dc      	ldr	r4, [r3, #12]
 80008e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	bf28      	it	cs
 80008f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 0501 	mov.w	r5, #1
 80008f8:	fa05 f303 	lsl.w	r3, r5, r3
 80008fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000900:	bf8c      	ite	hi
 8000902:	3c03      	subhi	r4, #3
 8000904:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000906:	4019      	ands	r1, r3
 8000908:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090a:	fa05 f404 	lsl.w	r4, r5, r4
 800090e:	3c01      	subs	r4, #1
 8000910:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000912:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	ea42 0201 	orr.w	r2, r2, r1
 8000918:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	bfaf      	iteee	ge
 800091e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	f000 000f 	andlt.w	r0, r0, #15
 8000926:	4b06      	ldrlt	r3, [pc, #24]	; (8000940 <HAL_NVIC_SetPriority+0x64>)
 8000928:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	bfa5      	ittet	ge
 800092c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000930:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000938:	bd30      	pop	{r4, r5, pc}
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	e000ed14 	.word	0xe000ed14

08000944 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	3801      	subs	r0, #1
 8000946:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800094a:	d20a      	bcs.n	8000962 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000950:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	21f0      	movs	r1, #240	; 0xf0
 8000954:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000972:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000974:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000976:	bf0c      	ite	eq
 8000978:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800097c:	f022 0204 	bicne.w	r2, r2, #4
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	4770      	bx	lr
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000988:	4770      	bx	lr

0800098a <HAL_SYSTICK_IRQHandler>:
{
 800098a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800098c:	f7ff fffc 	bl	8000988 <HAL_SYSTICK_Callback>
 8000990:	bd08      	pop	{r3, pc}
	...

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000998:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8000b58 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a0:	4a6b      	ldr	r2, [pc, #428]	; (8000b50 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000b5c <HAL_GPIO_Init+0x1c8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009a8:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01U) << position;
 80009aa:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ae:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01U) << position;
 80009b0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80009b8:	45b6      	cmp	lr, r6
 80009ba:	f040 80b2 	bne.w	8000b22 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009be:	684c      	ldr	r4, [r1, #4]
 80009c0:	f024 0710 	bic.w	r7, r4, #16
 80009c4:	2f02      	cmp	r7, #2
 80009c6:	d116      	bne.n	80009f6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80009c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80009cc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80009d0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009d4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80009d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009dc:	f04f 0c0f 	mov.w	ip, #15
 80009e0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009e4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80009e8:	690d      	ldr	r5, [r1, #16]
 80009ea:	fa05 f50b 	lsl.w	r5, r5, fp
 80009ee:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009f2:	f8ca 5020 	str.w	r5, [sl, #32]
 80009f6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009fa:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009fc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a00:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a04:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a06:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a0a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a0e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a12:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a14:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a18:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a1a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1e:	d811      	bhi.n	8000a44 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000a20:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a22:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a26:	68cf      	ldr	r7, [r1, #12]
 8000a28:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a2c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a30:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a32:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a34:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a38:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000a3c:	409f      	lsls	r7, r3
 8000a3e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a42:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a44:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a46:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a48:	688f      	ldr	r7, [r1, #8]
 8000a4a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a4e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a50:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a52:	00e5      	lsls	r5, r4, #3
 8000a54:	d565      	bpl.n	8000b22 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	f04f 0b00 	mov.w	fp, #0
 8000a5a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a5e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a62:	4d3c      	ldr	r5, [pc, #240]	; (8000b54 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a68:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a6c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a70:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a74:	9703      	str	r7, [sp, #12]
 8000a76:	9f03      	ldr	r7, [sp, #12]
 8000a78:	f023 0703 	bic.w	r7, r3, #3
 8000a7c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a80:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a84:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a88:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a8c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a90:	f04f 0e0f 	mov.w	lr, #15
 8000a94:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a98:	42a8      	cmp	r0, r5
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a9a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a9e:	d047      	beq.n	8000b30 <HAL_GPIO_Init+0x19c>
 8000aa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aa4:	42a8      	cmp	r0, r5
 8000aa6:	d045      	beq.n	8000b34 <HAL_GPIO_Init+0x1a0>
 8000aa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aac:	42a8      	cmp	r0, r5
 8000aae:	d043      	beq.n	8000b38 <HAL_GPIO_Init+0x1a4>
 8000ab0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ab4:	42a8      	cmp	r0, r5
 8000ab6:	d041      	beq.n	8000b3c <HAL_GPIO_Init+0x1a8>
 8000ab8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000abc:	42a8      	cmp	r0, r5
 8000abe:	d03f      	beq.n	8000b40 <HAL_GPIO_Init+0x1ac>
 8000ac0:	4548      	cmp	r0, r9
 8000ac2:	d03f      	beq.n	8000b44 <HAL_GPIO_Init+0x1b0>
 8000ac4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000ac8:	42a8      	cmp	r0, r5
 8000aca:	d03d      	beq.n	8000b48 <HAL_GPIO_Init+0x1b4>
 8000acc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ad0:	42a8      	cmp	r0, r5
 8000ad2:	d03b      	beq.n	8000b4c <HAL_GPIO_Init+0x1b8>
 8000ad4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ad8:	42a8      	cmp	r0, r5
 8000ada:	bf14      	ite	ne
 8000adc:	2509      	movne	r5, #9
 8000ade:	2508      	moveq	r5, #8
 8000ae0:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ae4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ae8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000aea:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000aec:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000af2:	bf0c      	ite	eq
 8000af4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000af6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000af8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000afa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000afc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b00:	bf0c      	ite	eq
 8000b02:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b04:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b06:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b08:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b0e:	bf0c      	ite	eq
 8000b10:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b12:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b14:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b16:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b18:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b1a:	bf54      	ite	pl
 8000b1c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b1e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b20:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b22:	3301      	adds	r3, #1
 8000b24:	2b10      	cmp	r3, #16
 8000b26:	f47f af40 	bne.w	80009aa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b2a:	b005      	add	sp, #20
 8000b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b30:	465d      	mov	r5, fp
 8000b32:	e7d5      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b34:	2501      	movs	r5, #1
 8000b36:	e7d3      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b38:	2502      	movs	r5, #2
 8000b3a:	e7d1      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b3c:	2503      	movs	r5, #3
 8000b3e:	e7cf      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b40:	2504      	movs	r5, #4
 8000b42:	e7cd      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b44:	2505      	movs	r5, #5
 8000b46:	e7cb      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b48:	2506      	movs	r5, #6
 8000b4a:	e7c9      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b4c:	2507      	movs	r5, #7
 8000b4e:	e7c7      	b.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000b50:	40013c00 	.word	0x40013c00
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40021400 	.word	0x40021400

08000b60 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b60:	6803      	ldr	r3, [r0, #0]
{
 8000b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b64:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	07d8      	lsls	r0, r3, #31
 8000b68:	d438      	bmi.n	8000bdc <HAL_RCC_OscConfig+0x7c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	0799      	lsls	r1, r3, #30
 8000b6e:	d46d      	bmi.n	8000c4c <HAL_RCC_OscConfig+0xec>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	071e      	lsls	r6, r3, #28
 8000b74:	f100 80b9 	bmi.w	8000cea <HAL_RCC_OscConfig+0x18a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	075d      	lsls	r5, r3, #29
 8000b7c:	d528      	bpl.n	8000bd0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	4ba6      	ldr	r3, [pc, #664]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000b84:	4da6      	ldr	r5, [pc, #664]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000ba0:	f7ff fc64 	bl	800046c <HAL_GetTick>
 8000ba4:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000ba6:	682b      	ldr	r3, [r5, #0]
 8000ba8:	05da      	lsls	r2, r3, #23
 8000baa:	f140 80c0 	bpl.w	8000d2e <HAL_RCC_OscConfig+0x1ce>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bae:	4b9d      	ldr	r3, [pc, #628]	; (8000e24 <HAL_RCC_OscConfig+0x2c4>)
 8000bb0:	7a22      	ldrb	r2, [r4, #8]
 8000bb2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bb4:	68a3      	ldr	r3, [r4, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 80c7 	beq.w	8000d4a <HAL_RCC_OscConfig+0x1ea>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fc56 	bl	800046c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc0:	4d96      	ldr	r5, [pc, #600]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000bc2:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc4:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bca:	079b      	lsls	r3, r3, #30
 8000bcc:	f140 80b6 	bpl.w	8000d3c <HAL_RCC_OscConfig+0x1dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bd0:	69a2      	ldr	r2, [r4, #24]
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	f040 80c9 	bne.w	8000d6a <HAL_RCC_OscConfig+0x20a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e015      	b.n	8000c08 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bdc:	4b8f      	ldr	r3, [pc, #572]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	f002 020c 	and.w	r2, r2, #12
 8000be4:	2a04      	cmp	r2, #4
 8000be6:	d007      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bee:	2a08      	cmp	r2, #8
 8000bf0:	d10c      	bne.n	8000c0c <HAL_RCC_OscConfig+0xac>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	025a      	lsls	r2, r3, #9
 8000bf6:	d509      	bpl.n	8000c0c <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	4b88      	ldr	r3, [pc, #544]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	d5b4      	bpl.n	8000b6a <HAL_RCC_OscConfig+0xa>
 8000c00:	6863      	ldr	r3, [r4, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1b1      	bne.n	8000b6a <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
}
 8000c08:	b003      	add	sp, #12
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c0c:	4b86      	ldr	r3, [pc, #536]	; (8000e28 <HAL_RCC_OscConfig+0x2c8>)
 8000c0e:	7922      	ldrb	r2, [r4, #4]
 8000c10:	701a      	strb	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c12:	6863      	ldr	r3, [r4, #4]
 8000c14:	b16b      	cbz	r3, 8000c32 <HAL_RCC_OscConfig+0xd2>
        tickstart = HAL_GetTick();
 8000c16:	f7ff fc29 	bl	800046c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1a:	4d80      	ldr	r5, [pc, #512]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000c1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	039f      	lsls	r7, r3, #14
 8000c22:	d4a2      	bmi.n	8000b6a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff fc22 	bl	800046c <HAL_GetTick>
 8000c28:	1b80      	subs	r0, r0, r6
 8000c2a:	2864      	cmp	r0, #100	; 0x64
 8000c2c:	d9f7      	bls.n	8000c1e <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8000c2e:	2003      	movs	r0, #3
 8000c30:	e7ea      	b.n	8000c08 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
 8000c32:	f7ff fc1b 	bl	800046c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	4d79      	ldr	r5, [pc, #484]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000c38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3a:	682b      	ldr	r3, [r5, #0]
 8000c3c:	0398      	lsls	r0, r3, #14
 8000c3e:	d594      	bpl.n	8000b6a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fc14 	bl	800046c <HAL_GetTick>
 8000c44:	1b80      	subs	r0, r0, r6
 8000c46:	2864      	cmp	r0, #100	; 0x64
 8000c48:	d9f7      	bls.n	8000c3a <HAL_RCC_OscConfig+0xda>
 8000c4a:	e7f0      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c4c:	4b73      	ldr	r3, [pc, #460]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	f012 0f0c 	tst.w	r2, #12
 8000c54:	d007      	beq.n	8000c66 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c5c:	2a08      	cmp	r2, #8
 8000c5e:	d116      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	0259      	lsls	r1, r3, #9
 8000c64:	d413      	bmi.n	8000c8e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c66:	4b6d      	ldr	r3, [pc, #436]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	0792      	lsls	r2, r2, #30
 8000c6c:	d502      	bpl.n	8000c74 <HAL_RCC_OscConfig+0x114>
 8000c6e:	68e2      	ldr	r2, [r4, #12]
 8000c70:	2a01      	cmp	r2, #1
 8000c72:	d1c8      	bne.n	8000c06 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	22f8      	movs	r2, #248	; 0xf8
 8000c78:	fa92 f2a2 	rbit	r2, r2
 8000c7c:	fab2 f182 	clz	r1, r2
 8000c80:	6922      	ldr	r2, [r4, #16]
 8000c82:	408a      	lsls	r2, r1
 8000c84:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8c:	e770      	b.n	8000b70 <HAL_RCC_OscConfig+0x10>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c8e:	68e2      	ldr	r2, [r4, #12]
 8000c90:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <HAL_RCC_OscConfig+0x2cc>)
 8000c92:	b1da      	cbz	r2, 8000ccc <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_HSI_ENABLE();
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c98:	f7ff fbe8 	bl	800046c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9c:	4d5f      	ldr	r5, [pc, #380]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000c9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	079b      	lsls	r3, r3, #30
 8000ca4:	d50c      	bpl.n	8000cc0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca6:	6829      	ldr	r1, [r5, #0]
 8000ca8:	23f8      	movs	r3, #248	; 0xf8
 8000caa:	fa93 f3a3 	rbit	r3, r3
 8000cae:	fab3 f283 	clz	r2, r3
 8000cb2:	6923      	ldr	r3, [r4, #16]
 8000cb4:	4093      	lsls	r3, r2
 8000cb6:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	602b      	str	r3, [r5, #0]
 8000cbe:	e757      	b.n	8000b70 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fbd4 	bl	800046c <HAL_GetTick>
 8000cc4:	1b80      	subs	r0, r0, r6
 8000cc6:	2802      	cmp	r0, #2
 8000cc8:	d9ea      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x140>
 8000cca:	e7b0      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_HSI_DISABLE();
 8000ccc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cce:	f7ff fbcd 	bl	800046c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd2:	4d52      	ldr	r5, [pc, #328]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8000cd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd6:	682b      	ldr	r3, [r5, #0]
 8000cd8:	079f      	lsls	r7, r3, #30
 8000cda:	f57f af49 	bpl.w	8000b70 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cde:	f7ff fbc5 	bl	800046c <HAL_GetTick>
 8000ce2:	1b80      	subs	r0, r0, r6
 8000ce4:	2802      	cmp	r0, #2
 8000ce6:	d9f6      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x176>
 8000ce8:	e7a1      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cea:	6962      	ldr	r2, [r4, #20]
 8000cec:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <HAL_RCC_OscConfig+0x2d0>)
 8000cee:	b17a      	cbz	r2, 8000d10 <HAL_RCC_OscConfig+0x1b0>
      __HAL_RCC_LSI_ENABLE();
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cf4:	f7ff fbba 	bl	800046c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf8:	4d48      	ldr	r5, [pc, #288]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000cfa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cfe:	0798      	lsls	r0, r3, #30
 8000d00:	f53f af3a 	bmi.w	8000b78 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fbb2 	bl	800046c <HAL_GetTick>
 8000d08:	1b80      	subs	r0, r0, r6
 8000d0a:	2802      	cmp	r0, #2
 8000d0c:	d9f6      	bls.n	8000cfc <HAL_RCC_OscConfig+0x19c>
 8000d0e:	e78e      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_LSI_DISABLE();
 8000d10:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d12:	f7ff fbab 	bl	800046c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d16:	4d41      	ldr	r5, [pc, #260]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000d18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d1c:	0799      	lsls	r1, r3, #30
 8000d1e:	f57f af2b 	bpl.w	8000b78 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d22:	f7ff fba3 	bl	800046c <HAL_GetTick>
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	2802      	cmp	r0, #2
 8000d2a:	d9f6      	bls.n	8000d1a <HAL_RCC_OscConfig+0x1ba>
 8000d2c:	e77f      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d2e:	f7ff fb9d 	bl	800046c <HAL_GetTick>
 8000d32:	1b80      	subs	r0, r0, r6
 8000d34:	2802      	cmp	r0, #2
 8000d36:	f67f af36 	bls.w	8000ba6 <HAL_RCC_OscConfig+0x46>
 8000d3a:	e778      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fb96 	bl	800046c <HAL_GetTick>
 8000d40:	1b80      	subs	r0, r0, r6
 8000d42:	42b8      	cmp	r0, r7
 8000d44:	f67f af40 	bls.w	8000bc8 <HAL_RCC_OscConfig+0x68>
 8000d48:	e771      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fb8f 	bl	800046c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d4e:	4d33      	ldr	r5, [pc, #204]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000d50:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d52:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d58:	0798      	lsls	r0, r3, #30
 8000d5a:	f57f af39 	bpl.w	8000bd0 <HAL_RCC_OscConfig+0x70>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fb85 	bl	800046c <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	42b8      	cmp	r0, r7
 8000d66:	d9f6      	bls.n	8000d56 <HAL_RCC_OscConfig+0x1f6>
 8000d68:	e761      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d6a:	4d2c      	ldr	r5, [pc, #176]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
 8000d6c:	68ab      	ldr	r3, [r5, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	f43f af47 	beq.w	8000c06 <HAL_RCC_OscConfig+0xa6>
 8000d78:	4e2e      	ldr	r6, [pc, #184]	; (8000e34 <HAL_RCC_OscConfig+0x2d4>)
 8000d7a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d7e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d80:	d13e      	bne.n	8000e00 <HAL_RCC_OscConfig+0x2a0>
        tickstart = HAL_GetTick();
 8000d82:	f7ff fb73 	bl	800046c <HAL_GetTick>
 8000d86:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d88:	682b      	ldr	r3, [r5, #0]
 8000d8a:	0199      	lsls	r1, r3, #6
 8000d8c:	d432      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x294>
 8000d8e:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000d92:	fa97 f7a7 	rbit	r7, r7
 8000d96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d9a:	fab7 f787 	clz	r7, r7
 8000d9e:	fa92 f2a2 	rbit	r2, r2
 8000da2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000da6:	fab2 f082 	clz	r0, r2
 8000daa:	fa91 f1a1 	rbit	r1, r1
 8000dae:	6a22      	ldr	r2, [r4, #32]
 8000db0:	69e3      	ldr	r3, [r4, #28]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000db6:	fa02 f707 	lsl.w	r7, r2, r7
 8000dba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dbc:	0852      	lsrs	r2, r2, #1
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	4082      	lsls	r2, r0
 8000dc2:	433b      	orrs	r3, r7
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc8:	4c14      	ldr	r4, [pc, #80]	; (8000e1c <HAL_RCC_OscConfig+0x2bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000dca:	fab1 f181 	clz	r1, r1
 8000dce:	fa02 f101 	lsl.w	r1, r2, r1
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000dda:	f7ff fb47 	bl	800046c <HAL_GetTick>
 8000dde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	019a      	lsls	r2, r3, #6
 8000de4:	f53f aef8 	bmi.w	8000bd8 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de8:	f7ff fb40 	bl	800046c <HAL_GetTick>
 8000dec:	1b40      	subs	r0, r0, r5
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9f6      	bls.n	8000de0 <HAL_RCC_OscConfig+0x280>
 8000df2:	e71c      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000df4:	f7ff fb3a 	bl	800046c <HAL_GetTick>
 8000df8:	1bc0      	subs	r0, r0, r7
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d9c4      	bls.n	8000d88 <HAL_RCC_OscConfig+0x228>
 8000dfe:	e716      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8000e00:	f7ff fb34 	bl	800046c <HAL_GetTick>
 8000e04:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	f57f aee5 	bpl.w	8000bd8 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e0e:	f7ff fb2d 	bl	800046c <HAL_GetTick>
 8000e12:	1b00      	subs	r0, r0, r4
 8000e14:	2802      	cmp	r0, #2
 8000e16:	d9f6      	bls.n	8000e06 <HAL_RCC_OscConfig+0x2a6>
 8000e18:	e709      	b.n	8000c2e <HAL_RCC_OscConfig+0xce>
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000
 8000e24:	40023870 	.word	0x40023870
 8000e28:	40023802 	.word	0x40023802
 8000e2c:	42470000 	.word	0x42470000
 8000e30:	42470e80 	.word	0x42470e80
 8000e34:	42470060 	.word	0x42470060

08000e38 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e38:	4b4e      	ldr	r3, [pc, #312]	; (8000f74 <HAL_RCC_ClockConfig+0x13c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	f002 020f 	and.w	r2, r2, #15
 8000e40:	428a      	cmp	r2, r1
{
 8000e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e46:	4605      	mov	r5, r0
 8000e48:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e4a:	d31d      	bcc.n	8000e88 <HAL_RCC_ClockConfig+0x50>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e4c:	682a      	ldr	r2, [r5, #0]
 8000e4e:	0794      	lsls	r4, r2, #30
 8000e50:	d424      	bmi.n	8000e9c <HAL_RCC_ClockConfig+0x64>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e52:	07d0      	lsls	r0, r2, #31
 8000e54:	d42a      	bmi.n	8000eac <HAL_RCC_ClockConfig+0x74>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e56:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <HAL_RCC_ClockConfig+0x13c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	f002 020f 	and.w	r2, r2, #15
 8000e5e:	4296      	cmp	r6, r2
 8000e60:	d378      	bcc.n	8000f54 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e62:	682a      	ldr	r2, [r5, #0]
 8000e64:	0751      	lsls	r1, r2, #29
 8000e66:	d47d      	bmi.n	8000f64 <HAL_RCC_ClockConfig+0x12c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e68:	0713      	lsls	r3, r2, #28
 8000e6a:	d507      	bpl.n	8000e7c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e6c:	4a42      	ldr	r2, [pc, #264]	; (8000f78 <HAL_RCC_ClockConfig+0x140>)
 8000e6e:	6929      	ldr	r1, [r5, #16]
 8000e70:	6893      	ldr	r3, [r2, #8]
 8000e72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e7a:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fac1 	bl	8000404 <HAL_InitTick>
  
  return HAL_OK;
 8000e82:	2000      	movs	r0, #0
}
 8000e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e88:	b2ca      	uxtb	r2, r1
 8000e8a:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d0da      	beq.n	8000e4c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
 8000e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e9c:	4936      	ldr	r1, [pc, #216]	; (8000f78 <HAL_RCC_ClockConfig+0x140>)
 8000e9e:	68a8      	ldr	r0, [r5, #8]
 8000ea0:	688b      	ldr	r3, [r1, #8]
 8000ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ea6:	4303      	orrs	r3, r0
 8000ea8:	608b      	str	r3, [r1, #8]
 8000eaa:	e7d2      	b.n	8000e52 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eac:	686a      	ldr	r2, [r5, #4]
 8000eae:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <HAL_RCC_ClockConfig+0x140>)
 8000eb0:	2a01      	cmp	r2, #1
 8000eb2:	d11e      	bne.n	8000ef2 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eba:	d0ec      	beq.n	8000e96 <HAL_RCC_ClockConfig+0x5e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ebc:	4c2e      	ldr	r4, [pc, #184]	; (8000f78 <HAL_RCC_ClockConfig+0x140>)
 8000ebe:	68a3      	ldr	r3, [r4, #8]
 8000ec0:	f023 0303 	bic.w	r3, r3, #3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000ec8:	f7ff fad0 	bl	800046c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ecc:	686b      	ldr	r3, [r5, #4]
 8000ece:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000ed0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed2:	d118      	bne.n	8000f06 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed4:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed8:	68a3      	ldr	r3, [r4, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d0b9      	beq.n	8000e56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee2:	f7ff fac3 	bl	800046c <HAL_GetTick>
 8000ee6:	1bc0      	subs	r0, r0, r7
 8000ee8:	4540      	cmp	r0, r8
 8000eea:	d9f5      	bls.n	8000ed8 <HAL_RCC_ClockConfig+0xa0>
          return HAL_TIMEOUT;
 8000eec:	2003      	movs	r0, #3
 8000eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000ef2:	1e91      	subs	r1, r2, #2
 8000ef4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000ef8:	d802      	bhi.n	8000f00 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000efa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000efe:	e7dc      	b.n	8000eba <HAL_RCC_ClockConfig+0x82>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	f013 0f02 	tst.w	r3, #2
 8000f04:	e7d9      	b.n	8000eba <HAL_RCC_ClockConfig+0x82>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0e:	68a3      	ldr	r3, [r4, #8]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d09e      	beq.n	8000e56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f18:	f7ff faa8 	bl	800046c <HAL_GetTick>
 8000f1c:	1bc0      	subs	r0, r0, r7
 8000f1e:	4540      	cmp	r0, r8
 8000f20:	d9f5      	bls.n	8000f0e <HAL_RCC_ClockConfig+0xd6>
 8000f22:	e7e3      	b.n	8000eec <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d112      	bne.n	8000f4e <HAL_RCC_ClockConfig+0x116>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f28:	f241 3588 	movw	r5, #5000	; 0x1388
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f2c:	68a3      	ldr	r3, [r4, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2e:	f7ff fa9d 	bl	800046c <HAL_GetTick>
 8000f32:	1bc0      	subs	r0, r0, r7
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d9f9      	bls.n	8000f2c <HAL_RCC_ClockConfig+0xf4>
 8000f38:	e7d8      	b.n	8000eec <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f3a:	f7ff fa97 	bl	800046c <HAL_GetTick>
 8000f3e:	1bc0      	subs	r0, r0, r7
 8000f40:	4540      	cmp	r0, r8
 8000f42:	d8d3      	bhi.n	8000eec <HAL_RCC_ClockConfig+0xb4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f44:	68a3      	ldr	r3, [r4, #8]
 8000f46:	f013 0f0c 	tst.w	r3, #12
 8000f4a:	d1f6      	bne.n	8000f3a <HAL_RCC_ClockConfig+0x102>
 8000f4c:	e783      	b.n	8000e56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f4e:	f241 3888 	movw	r8, #5000	; 0x1388
 8000f52:	e7f7      	b.n	8000f44 <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f54:	b2f2      	uxtb	r2, r6
 8000f56:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	429e      	cmp	r6, r3
 8000f60:	d199      	bne.n	8000e96 <HAL_RCC_ClockConfig+0x5e>
 8000f62:	e77e      	b.n	8000e62 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f64:	4904      	ldr	r1, [pc, #16]	; (8000f78 <HAL_RCC_ClockConfig+0x140>)
 8000f66:	68e8      	ldr	r0, [r5, #12]
 8000f68:	688b      	ldr	r3, [r1, #8]
 8000f6a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000f6e:	4303      	orrs	r3, r0
 8000f70:	608b      	str	r3, [r1, #8]
 8000f72:	e779      	b.n	8000e68 <HAL_RCC_ClockConfig+0x30>
 8000f74:	40023c00 	.word	0x40023c00
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000f7e:	6893      	ldr	r3, [r2, #8]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b04      	cmp	r3, #4
{
 8000f86:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f88:	d003      	beq.n	8000f92 <HAL_RCC_GetSysClockFreq+0x16>
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d003      	beq.n	8000f96 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f90:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000f92:	4816      	ldr	r0, [pc, #88]	; (8000fec <HAL_RCC_GetSysClockFreq+0x70>)
 8000f94:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f96:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f98:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f9a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000fa2:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000fa6:	6853      	ldr	r3, [r2, #4]
 8000fa8:	fa94 f0a4 	rbit	r0, r4
 8000fac:	fab0 f080 	clz	r0, r0
 8000fb0:	ea03 0304 	and.w	r3, r3, r4
 8000fb4:	fa23 f300 	lsr.w	r3, r3, r0
 8000fb8:	bf14      	ite	ne
 8000fba:	480c      	ldrne	r0, [pc, #48]	; (8000fec <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000fbc:	480a      	ldreq	r0, [pc, #40]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000fbe:	fbb0 f0f1 	udiv	r0, r0, r1
 8000fc2:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000fc6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	fab2 f282 	clz	r2, r2
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd8:	40d3      	lsrs	r3, r2
 8000fda:	3301      	adds	r3, #1
 8000fdc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000fde:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fe2:	bd10      	pop	{r4, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	00f42400 	.word	0x00f42400
 8000fec:	017d7840 	.word	0x017d7840

08000ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ff0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ff2:	f7ff ffc3 	bl	8000f7c <HAL_RCC_GetSysClockFreq>
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_RCC_GetHCLKFreq+0x28>)
 8000ff8:	22f0      	movs	r2, #240	; 0xf0
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	fa92 f2a2 	rbit	r2, r2
 8001000:	fab2 f282 	clz	r2, r2
 8001004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001008:	40d3      	lsrs	r3, r2
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_RCC_GetHCLKFreq+0x2c>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	40d8      	lsrs	r0, r3
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_RCC_GetHCLKFreq+0x30>)
 8001012:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001014:	bd08      	pop	{r3, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	08001084 	.word	0x08001084
 8001020:	20000000 	.word	0x20000000

08001024 <__libc_init_array>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	4e0d      	ldr	r6, [pc, #52]	; (800105c <__libc_init_array+0x38>)
 8001028:	4c0d      	ldr	r4, [pc, #52]	; (8001060 <__libc_init_array+0x3c>)
 800102a:	1ba4      	subs	r4, r4, r6
 800102c:	10a4      	asrs	r4, r4, #2
 800102e:	2500      	movs	r5, #0
 8001030:	42a5      	cmp	r5, r4
 8001032:	d109      	bne.n	8001048 <__libc_init_array+0x24>
 8001034:	4e0b      	ldr	r6, [pc, #44]	; (8001064 <__libc_init_array+0x40>)
 8001036:	4c0c      	ldr	r4, [pc, #48]	; (8001068 <__libc_init_array+0x44>)
 8001038:	f000 f818 	bl	800106c <_init>
 800103c:	1ba4      	subs	r4, r4, r6
 800103e:	10a4      	asrs	r4, r4, #2
 8001040:	2500      	movs	r5, #0
 8001042:	42a5      	cmp	r5, r4
 8001044:	d105      	bne.n	8001052 <__libc_init_array+0x2e>
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800104c:	4798      	blx	r3
 800104e:	3501      	adds	r5, #1
 8001050:	e7ee      	b.n	8001030 <__libc_init_array+0xc>
 8001052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001056:	4798      	blx	r3
 8001058:	3501      	adds	r5, #1
 800105a:	e7f2      	b.n	8001042 <__libc_init_array+0x1e>
 800105c:	08001094 	.word	0x08001094
 8001060:	08001094 	.word	0x08001094
 8001064:	08001094 	.word	0x08001094
 8001068:	08001098 	.word	0x08001098

0800106c <_init>:
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	bf00      	nop
 8001070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001072:	bc08      	pop	{r3}
 8001074:	469e      	mov	lr, r3
 8001076:	4770      	bx	lr

08001078 <_fini>:
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107a:	bf00      	nop
 800107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107e:	bc08      	pop	{r3}
 8001080:	469e      	mov	lr, r3
 8001082:	4770      	bx	lr
